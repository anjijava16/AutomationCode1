package com.edureka.paymentProcess;

import org.testng.annotations.Test;

import com.edureka.pages.DashboardPage;
import com.edureka.pages.MyProfilePage;
import com.edureka.pages.OrderSummaryPage;
import com.edureka.pages.PayPalPage;
import com.edureka.pages.RazorPayPage;
import com.edureka.pages.SelectedCoursePage;
import com.edureka.pages.SignInModalPage;
import com.edureka.pages.UserHomePage;
import com.edureka.util.DriverTestCase;

public class MakePaymentWhenNoneOfOfferPresent extends DriverTestCase{
    private DashboardPage dashboardPage;
    private UserHomePage userHomePage;
    private SelectedCoursePage selectedCoursePage;
    private OrderSummaryPage orderSummaryPage;
    private SignInModalPage signInModalPage;
    private RazorPayPage razorPayPage;
    private MyProfilePage myProfilePage;
    private PayPalPage payPalPage;

    @Test
    public void test_013MakePaymentWhenNoneOfOfferPresent() throws Exception {

        try {
 
            // Navigate to app url
            addLog("Navigate to the Edureka application url");
            dashboardPage = applicationSetup();

           // Verify Edureka Dashboard Page
            addLog("Verify Edureka Dashboard Page");
            dashboardPage=  dashboardPage.verifyDashboard();

            // Click on Signin Navigation Header
            addLog("Click on SignIn Navigation header");
            signInModalPage = dashboardPage.clickSignInHeader();

            // Verify LogIn Is Default
            addLog("Verify LogIn Is Default");
            signInModalPage = signInModalPage.verifyLoginIsDefault();

            // click on Sign up link
            addLog("click on Sign up link");
            signInModalPage=signInModalPage.clickSignUp();

            String edurekaDomain = propertyReader.readApplicationFile("EdurekaDomain");
            addLog("Sign up user");
            userHomePage= signInModalPage.signUp(UserHomePage.class, edurekaDomain);

            // Verify User Home Page
            addLog("Verify User Home Page");
            userHomePage=userHomePage.verifyUserPage();

            // Select Course
            String courseName = propertyReader.readTestData("BigData&Hadoop");
            addLog("Select Course" +courseName);
            selectedCoursePage=dashboardPage.selectCourse(courseName);

            // Verify Selected course should be open.
            addLog("Verify Selected course should be open");
            selectedCoursePage=selectedCoursePage.verifySelectedPopularCoursePage(courseName);

            // Click on Enroll Button
            addLog("Click on Enroll Button");
            orderSummaryPage=selectedCoursePage.clickOnEnrollButton(OrderSummaryPage.class);
           
            /*** On click of Enroll when none of the offer is present
            * 
            */
            
            // Verify Order Summary Page
            addLog("Verify Order Summary Page");
            orderSummaryPage=orderSummaryPage.verifyPage();

            // Change Currency
            String currency= propertyReader.readTestData("INRCurrency");
            addLog("Select currecnt" +currency +" from currnecy table");
            orderSummaryPage=orderSummaryPage.changeCurrency(currency);

            // Verify total Amount for USD is equal to Net price
            addLog("verify Total amount");
            orderSummaryPage=orderSummaryPage.verifyTotalAmount(currency);
            
            //
            String course_Id= propertyReader.readTestData("Course_ID_BigData");
            String course_Title= propertyReader.readTestData("BigData_Hadoop_Title");
           // String discountPlan="0";
            //String freeCourseId=null;
            orderSummaryPage=orderSummaryPage.dataVerificationInUser_PreOrderTable(course_Id, course_Title, "",currency,"MakePaymentWhenB1S2OfferIsPresent","pre_orders");

          	 /*****
             * On click of Pay securely(Razorpay) when none of the offer is present:
             **/
            // Click on Razor pay securely button
            addLog("Click on Razor pay securely button");
            razorPayPage= orderSummaryPage.clickOnRazorPaySecurelyButton();

            // Verify Razor page
            addLog("Verify Razor page");
            razorPayPage=razorPayPage.verifyPage();

            // Click on Net Banking tab
            addLog("Click on Net Banking tab");
            razorPayPage=razorPayPage.clickOnNetBankingTab();

            // Select bank
            String bankName = propertyReader.readTestData("Bank");
            addLog("Select Bank" +bankName +" from bank table ");
            razorPayPage=razorPayPage.selectBank(bankName);

            // Click on pay button
            addLog("Click on pay button");
            razorPayPage=razorPayPage.clickOnPayButton();

            // Get Parent window Id
            addLog("Get Parent Window ID");
            String parentWidnow = getParentWindowHandle();

            // Switch Child Window and Click on Succss button
            addLog("Switch Child Window and Click on Succss button");
            switchPreviewWindow();
            myProfilePage=razorPayPage.clickOnSuccessButton();

            // Switch to Parent Window and verify my Profile page
            addLog("Switch to Parent Window and verify my Profile page");
            switchParentWindow(parentWidnow);
            myProfilePage= myProfilePage.verifyPage();

            // Verify Payment success message
            addLog("Verify payment success message 'Thank you for making payment !'");
            myProfilePage= myProfilePage.verifySuccessPaymentMessage();

            // Verify Data in User table
            addLog("Verify Data in User table");
            myProfilePage=myProfilePage.dataVerificationInUserTable("1");

            // Verify Data in Pre-Order table
            addLog("Verify Data in Pre-Order table");
            
            String paymentGateway = propertyReader.readTestData("PaymentGatewayRazor");
            myProfilePage=myProfilePage.dataVerificationInUser_PreOrderTable(course_Id,course_Title,paymentGateway,currency,"MakePaymentWhenB1S2OfferIsPresent","pre_orders_Payment");

            // Verify Data in User Course Table
            String course_Group = propertyReader.readTestData("Course_Group_BigData");
            String isPaidValue= propertyReader.readTestData("HomePage_Signup_Is_Paid_Value");
            addLog("Verify Data in User Course Table");
            myProfilePage=myProfilePage.dataVerificationInUser_CoursedTable(course_Id, isPaidValue, course_Group);

            // Database verification in Post order table
            addLog("Database verification in Post order table");
            myProfilePage=myProfilePage.dataVerificationInUser_PostOrderTable(course_Id,course_Title,paymentGateway,currency);
            //Verify the Url  on my profile page after payment
            myProfilePage=myProfilePage.verifyCourseIdInUrl(course_Id);
            
            //Data Verification in event table for payment type Razorpay
            String eventType=propertyReader.readTestData("EventTypeRazorpay");;
            myProfilePage=myProfilePage.dataVerificationInUser_Events_Table_PaymentType(eventType);
            
            // Click on Profile Dropdown
            String userName = propertyReader.readRunTimeData("UserName");
            addLog("Click on Profile Dropdown");
            userHomePage=userHomePage.clickOnProfileDropdown(userName);            
            
            // Logout from the application
            addLog("Logout from the application.");
            dashboardPage = userHomePage.logout(); 
            
            /*****
            * On click of Pay securely(Paypal) when none of the offer is present
            **/
             
            // Click on Signin Navigation Header
            addLog("Click on SignIn Navigation header");
            signInModalPage = dashboardPage.clickSignInHeader();

            // Verify LogIn Is Default
            addLog("Verify LogIn Is Default");
            signInModalPage = signInModalPage.verifyLoginIsDefault();

            // click on Sign up link
            addLog("click on Sign up link");
            signInModalPage=signInModalPage.clickSignUp();

           edurekaDomain = propertyReader.readApplicationFile("EdurekaDomain");
            addLog("Sign up user");
            userHomePage= signInModalPage.signUp(UserHomePage.class, edurekaDomain);

            // Verify User Home Page
            addLog("Verify User Home Page");
            userHomePage=userHomePage.verifyUserPage();

            // Select Course
            courseName = propertyReader.readTestData("ApacheSpark&Scala");
            addLog("Select Course" +courseName);
            selectedCoursePage=dashboardPage.selectCourse(courseName);

            // Verify Selected course should be open.
            addLog("Verify Selected course should be open");
            selectedCoursePage=selectedCoursePage.verifySelectedPopularCoursePage(courseName);

            // Click on Enroll Button
            addLog("Click on Enroll Button");
            orderSummaryPage=selectedCoursePage.clickOnEnrollButton(OrderSummaryPage.class);
            
            // Verify Order Summary Page
            addLog("Verify Order Summary Page");
            orderSummaryPage=orderSummaryPage.verifyPage();

            currency= propertyReader.readTestData("USDCurrency");
            orderSummaryPage=orderSummaryPage.changeCurrency(currency);

            // Verify total Amount for USD is equal to Net price
            addLog("Verify total Amount for USD is equal to Net price");
            orderSummaryPage=orderSummaryPage.verifyTotalAmount(currency);

            // Verify USD Currency Exclusive Of Service Tax
            addLog("Verify USD Currency Exclusive Of Service Tax");
            orderSummaryPage=orderSummaryPage.verifyUSDCurrency();

            // Click on Paypal link
            addLog("Click on Paypal link");
            payPalPage= orderSummaryPage.clickOnPaypalLink_New();

            // Verify Paypal Page
            addLog("Verify Paypal Page");
            payPalPage=payPalPage.verifyPage();

            // Enter Email, Password and Login paypal account
            addLog("Enter Email, Password and Login paypal account");
            payPalPage=payPalPage.enterEmailAndPassword();

            // Make payment by clicking on Continue button
            addLog("Make payment by clicking on Continue button");
            myProfilePage=payPalPage.clickOnContinueButton();

            // Switch to Parent Window and verify my Profile page
            addLog("Switch to Parent Window and verify my Profile page");
            myProfilePage= myProfilePage.verifyPage();

            // Verify Payment success message
            addLog("Verify payment success message 'Thank you for making payment !'");
            myProfilePage= myProfilePage.verifySuccessPaymentMessage();


            // Verify Data in User table
            addLog("Verify Data in User table");
            myProfilePage=myProfilePage.dataVerificationInUserTable("2");

            // Verify Data in Pre-Order table
            paymentGateway = propertyReader.readTestData("PaymentGatewayPaypal");
            course_Id= propertyReader.readTestData("Course_ID_ApacheSpark&Scala");
            course_Title= propertyReader.readTestData("ApacheSpark_Title");
            
            addLog("Verify Data in Pre-Order table");
            myProfilePage=myProfilePage.dataVerificationInUser_PreOrderTable(course_Id,course_Title,paymentGateway,currency,"MakePaymentWhenB1S2OfferIsPresent","pre_orders_Payment");

            // Verify Data in User Course Table
            course_Group = propertyReader.readTestData("Course_Group_ApacheSpark&Scala");
            isPaidValue= propertyReader.readTestData("HomePage_Signup_Is_Paid_Value");
            addLog("Verify Data in User Course Table");
            myProfilePage=myProfilePage.dataVerificationInUser_CoursedTable(course_Id, isPaidValue, course_Group);

            // Database verification in Post order table
            addLog("Database verification in Post order table");
            myProfilePage=myProfilePage.dataVerificationInUser_PostOrderTable(course_Id,course_Title,paymentGateway,currency);
           
            //Data Verification in event table for payment type Razorpay
            eventType=propertyReader.readTestData("EventTypePaypal");;
            myProfilePage=myProfilePage.dataVerificationInUser_Events_Table_PaymentType(eventType);
            
        }
        catch (Error e) {
            captureScreenshot("test_013MakePaymentWhenNoneOfOfferPresent");
            throw e;
        } catch (Exception e) {
            captureScreenshot("test_013MakePaymentWhenNoneOfOfferPresent");
            throw e;
        }
    }
}