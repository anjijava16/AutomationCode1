package com.edureka.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.edureka.util.database.DatabaseConnInfoHolder;

public class Database {
	DatabaseConnInfoHolder dbConnObj = new DatabaseConnInfoHolder();

	static Connection connectionSource;

	static String url = "jdbc:mysql://52.26.225.168:3306/testQA-123";
	static String databaseName = "edureka-test";
	static String username = "testQA";
	static String pwd = "testQA-123";
	static String dbClass = "com.mysql.jdbc.Driver";

	public static Connection getDatabaseConnection() throws Exception {
		Class.forName(Database.dbClass);
		return DriverManager.getConnection(Database.url + Database.databaseName, Database.username, Database.pwd);
	}

	public Database() throws Exception {
		Database.connectionSource = Database.getDatabaseConnection();

	}

	public DatabaseConnInfoHolder getConnInfoObj() {
		this.dbConnObj.SetConnectionUrl("jdbc:mysql://52.26.225.168:3306/edureka-test");
		this.dbConnObj.SetDbUser("testQA");
		this.dbConnObj.SetDbPassword("testQA-123");
		this.dbConnObj.SetConnectionDriver("com.mysql.jdbc.Driver");
		this.dbConnObj.SetDbSid("edureka-test");
		this.dbConnObj.SetDbPort(3306);
		this.dbConnObj.SetHostName("52.26.225.168");
		return this.dbConnObj;

	}

	public String getRecord(String tableName, String columnNameToBeFetched, String columnNameToBeMatched, String valueToBeMatched) throws SQLException {
		// select mobile, first, lsaast, from users where email = 'asdf';
		String resultvar = "";
		try {
			String sqlQuery = "SELECT " + columnNameToBeFetched + " from " + tableName + " where " + columnNameToBeMatched + " = \"" + valueToBeMatched + "\"";
			try (PreparedStatement selectStmt = Database.connectionSource.prepareStatement(sqlQuery);

			ResultSet rs = selectStmt.executeQuery()) {
				if (!rs.isBeforeFirst()) {
					System.out.println("no rows found");
				} else {
					while (rs.next()) {
						resultvar = rs.getObject(1).toString();
					}
				}
			}
		}
		// }
		catch (Exception e) {
			System.out.println(e);
		} finally {
			if (Database.connectionSource == null) {
				Database.connectionSource.close();
			}
		}

		return resultvar;
	}

	public ArrayList<String> getRecords(String tableName, String columnNameToBeFetched, String columnNameToBeMatched, String valueToBeMatched) {

		ArrayList<String> al = new ArrayList<String>();
		String resultvar = null;
		try {

			String sqlQuery = "SELECT " + columnNameToBeFetched + " from " + tableName + " where " + columnNameToBeMatched + " = \"" + valueToBeMatched + "\"";
			try (PreparedStatement selectStmt = Database.connectionSource.prepareStatement(sqlQuery); ResultSet rs = selectStmt.executeQuery()) {
				if (!rs.isBeforeFirst()) {
					System.out.println("no rows found");
				} else {
					while (rs.next()) {
						for (int i = 1; i < (rs.getMetaData().getColumnCount() + 1); i++) {
							System.out.print(rs.getMetaData().getColumnName(i) + "=" + rs.getObject(i));
							resultvar = rs.getMetaData().getColumnName(i) + "=" + rs.getObject(i);
							al.add(resultvar);
						}
					}
				}
			}
		}

		catch (Exception e) {
			System.out.println(e);
		}

		finally {
			if (Database.connectionSource != null) {
				Database.connectionSource = null;
			}
		}
		return al;
	}

}
