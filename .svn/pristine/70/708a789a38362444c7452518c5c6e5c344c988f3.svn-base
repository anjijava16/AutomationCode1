package com.edureka.pages;

import java.text.ParseException;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import com.edureka.locators.LocatorReader;
import com.edureka.util.DriverHelper;

public class AdminAddOfferPage extends DriverHelper{


    private LocatorReader adminAddOffer;

    public AdminAddOfferPage(WebDriver driver) {
        super(driver);
        adminAddOffer = new LocatorReader("adminAddOffer.xml");
    }

    /**
     *  Verify Admin Add Offer Page
     *  * @return
     */
    public AdminAddOfferPage verifyAdminAddOfferPage() {
        String pageheader=adminAddOffer.getLocator("PageHeader");
        WaitForElementPresent(pageheader, getTimeOut());
        Assert.assertTrue(isElementPresent(pageheader));
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Create Flate Discount
     * @param offerType
     * @param offerTitle
     * @return
     * @throws ParseException 
     */
    public AdminAddOfferPage createDiscount(String offerType, String offerTitle) throws ParseException {
        int offerPriorityValue = 0;
        String ddOfferType=adminAddOffer.getLocator("Discount.DDOfferType");
        WaitForElementPresent(ddOfferType, getTimeOut());
        selectDropDown(ddOfferType, offerType);

        String tbOfferTitle=adminAddOffer.getLocator("Discount.TBOfferTitle");
        WaitForElementPresent(tbOfferTitle, getTimeOut());
        sendKeys(tbOfferTitle, offerTitle);

        String tbStartDate=adminAddOffer.getLocator("Discount.TBStartDate");
        WaitForElementPresent(tbStartDate, getTimeOut());
        sendKeys(tbStartDate, presenttDate());

        String tbEndDate=adminAddOffer.getLocator("Discount.TBEndDate");
        WaitForElementPresent(tbEndDate, getTimeOut());
        sendKeys(tbEndDate, nexDayDate());

        String maxPriorityValue=adminAddOffer.getLocator("Discount.MaxPriorityPriorityValue");
        WaitForElementPresent(maxPriorityValue, getTimeOut());
        String textMaxPriority= getText(maxPriorityValue);
        int maxPriority= Integer.parseInt(textMaxPriority);
        if(offerType.equalsIgnoreCase("CoursesDiscount")){
            offerPriorityValue = maxPriority-1;
        }
        else if (offerType.equalsIgnoreCase("FlatDiscount")|| (offerType.equalsIgnoreCase("B1SN"))){
            offerPriorityValue = maxPriority+1;
        }
        String offerPriority= Integer.toString(offerPriorityValue);

        String tbOfferPriority=adminAddOffer.getLocator("Discount.TBOfferPriority");
        WaitForElementPresent(tbOfferPriority, getTimeOut());
        sendKeys(tbOfferPriority, offerPriority);

        String chkFirstVisit=adminAddOffer.getLocator("Discount.CHKFirstVisit");
        WaitForElementPresent(chkFirstVisit, getTimeOut());
        clickOn(chkFirstVisit);

        String chkSecondVisit=adminAddOffer.getLocator("Discount.CHKSecondVisit");
        WaitForElementPresent(chkSecondVisit, getTimeOut());
        clickOn(chkSecondVisit);

        String chkThirdVisit=adminAddOffer.getLocator("Discount.CHKThirdAbove");
        WaitForElementPresent(chkThirdVisit, getTimeOut());
        clickOn(chkThirdVisit);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Enter Discount Values
     * @param discountType
     * @param disocuntValue
     * @return
     */
    public AdminAddOfferPage enterDiscountValues(String discountType, String disocuntValue) {
        String ddDiscountType=adminAddOffer.getLocator("Discount.DDDiscountType");
        WaitForElementPresent(ddDiscountType, getTimeOut());
        selectDropDown(ddDiscountType, discountType);

        String tbDiscountValue=adminAddOffer.getLocator("Discount.TBDiscountValue");
        WaitForElementPresent(tbDiscountValue, getTimeOut());
        sendKeys(tbDiscountValue, disocuntValue);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     * Enter Offer Code
     * @param offerCode
     * @return
     */
    public AdminAddOfferPage enterOfferCode(String offerCode) {
        String tbOfferCode=adminAddOffer.getLocator("Discount.TBOfferCode");
        WaitForElementPresent(tbOfferCode, getTimeOut());
        sendKeys(tbOfferCode, offerCode);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Select Corporate Type
     * @param type
     * @return
     */
    public AdminAddOfferPage selectCorporate(String type) {
        String chkCorporate=adminAddOffer.getLocator("Discount.CHKCorporate");
        WaitForElementPresent(chkCorporate, getTimeOut());
        clickOn(chkCorporate);

        String ddCorporate=adminAddOffer.getLocator("Discount.DDCorporate");
        WaitForElementPresent(ddCorporate, getTimeOut());
        clickOn(ddCorporate);

        String corporateType="//li[text()='"+type+"']";
        WaitForElementPresent(corporateType, getTimeOut());
        clickOn(corporateType);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }


    /**
     *  Check User, Customer and Repeat Customer Check boxes
     * @return
     */
    public AdminAddOfferPage checkUser_Customer_RepeatCustomer() {
        String chkUser=adminAddOffer.getLocator("Discount.CHKUser");
        WaitForElementPresent(chkUser, getTimeOut());
        clickOn(chkUser);

        String chkCustomer=adminAddOffer.getLocator("Discount.CHKCustomer");
        WaitForElementPresent(chkCustomer, getTimeOut());
        clickOn(chkCustomer);

        String chkRepeatCustomer=adminAddOffer.getLocator("Discount.CHKRepeatCustomer");
        WaitForElementPresent(chkRepeatCustomer, getTimeOut());
        clickOn(chkRepeatCustomer);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    public AdminAddOfferPage clickSubmitButton() {
        String btnSubmit=adminAddOffer.getLocator("Discount.BTNSubmit");
        WaitForElementPresent(btnSubmit, getTimeOut());
        clickOn(btnSubmit);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Check Batch Specific Discount
     * @return
     */
    public AdminAddOfferPage checkBatchSpecificDiscount() {
        String chkBatchSpecific=adminAddOffer.getLocator("Discount.CHKBatchSpecific");
        WaitForElementPresent(chkBatchSpecific, getTimeOut());
        clickOn(chkBatchSpecific);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Enter Course
     * @param course
     * @return
     */
    public AdminAddOfferPage enterCourse(String course) {
        String tbSelectCourse=adminAddOffer.getLocator("Discount.TBSelectCourse");
        WaitForElementPresent(tbSelectCourse, getTimeOut());
        sendKeys(tbSelectCourse, course);

        String ddCourse ="//li[text()='"+course+"']";
        WaitForElementPresent(ddCourse, getTimeOut());
        clickOn(ddCourse);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }


    /**
     *  Click on Select banner Header
     * @return
     */
    public AdminAddOfferPage selectBannerHeader() {
        String ltChangedSelectBanner=adminAddOffer.getLocator("Banner.LTChangeSelectBanner");
        WaitForElementPresent(ltChangedSelectBanner, getTimeOut());
        clickOn(ltChangedSelectBanner);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Select Banner Type
     * @return
     */
    public AdminAddOfferPage selectBanner(String banner_Type) {
        String doubleDelightBanner="//td[contains(text(),'"+banner_Type+"')]/following::td[2]/a";
        WaitForElementPresent(doubleDelightBanner, getTimeOut());
        clickOn(doubleDelightBanner);

        String btnSubmit=adminAddOffer.getLocator("Banner.BTNSubmit");
        WaitForElementPresent(btnSubmit, getTimeOut());
        clickOn(btnSubmit);
        acceptAlert();
        acceptAlert();
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Enter Message Near Upcoming batches
     * @return
     */
    public AdminAddOfferPage enterMessageNearUpcomingBatches() {
        String bannerUpcomingBatches=adminAddOffer.getLocator("Banner.BannerUpcomingBactchesText");
        WaitForElementPresent(bannerUpcomingBatches, getTimeOut());
        clickOn(bannerUpcomingBatches);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Enter Banner Text
     * @param message
     * @return
     */
    public AdminAddOfferPage enterBannerText(String message) {
        String bannerText=adminAddOffer.getLocator("Banner.TBBannerText");
        WaitForElementPresent(bannerText, getTimeOut());
        sendKeys(bannerText, message);

        String btnApplyBanner=adminAddOffer.getLocator("Banner.BTNApplyBanner");
        WaitForElementPresent(btnApplyBanner, getTimeOut());
        clickOn(btnApplyBanner);
        acceptAlert();
        acceptAlert();
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Select Status 
     * @param status
     * @return
     */
    public AdminAddOfferPage selectStatus(String status) {
        String ddStatus=adminAddOffer.getLocator("Discount.DDStatus");
        WaitForElementPresent(ddStatus, getTimeOut());
        selectDropDown(ddStatus, status);

        String btnSubmit=adminAddOffer.getLocator("Discount.BTNSubmit");
        WaitForElementPresent(btnSubmit, getTimeOut());
        clickOn(btnSubmit);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }
    /**
     *  Get and Update Offer Id
     * @return
     */
    public AdminAddOfferPage getOfferId() {
        String offer_Id=adminAddOffer.getLocator("Discount.OfferId");
        WaitForElementPresent(offer_Id, getTimeOut());
        String offer_id_Text= getText(offer_Id);
        String[] offer_Id_Code= offer_id_Text.split("- ");
        propertyReader.updatePropertyTestData("Offer_Id", offer_Id_Code[1]);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Logout Application
     * @return
     */
    public DashboardPage logOutApplication() {
        String ltLogout=adminAddOffer.getLocator("LTLogout");
        WaitForElementPresent(ltLogout, getTimeOut());
        clickOn(ltLogout);
        return PageFactory.initElements(driver, DashboardPage.class);
    }

    /**
     *  Select Batch
     * @return
     */
    public AdminAddOfferPage selectBatch() {
        String course_Batch=adminAddOffer.getLocator("Discount.BatchCourse");
        WaitForElementPresent(course_Batch, getTimeOut());
        clickOn(course_Batch);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }
    /**
     *  Get Pink Banner Message
     * @return
     */
    public String getPinkBannerMessage(String course) {
        String tbPinkBanner= "//strong[contains(text(),'"+course+"')]/following::td[3]/input";
        WaitForElementPresent(tbPinkBanner, getTimeOut());
        String msgPinkBanner= getAttribute(tbPinkBanner, "value");
        return msgPinkBanner;
    }

    /**
     *  Get Offer Code URL
     * @return
     */
    public String getOfferCodeUrl() {
        String urlOfferCode=adminAddOffer.getLocator("Discount.URLOfferCode");
        WaitForElementPresent(urlOfferCode, getTimeOut());
        String urlOfferCodeText= getText(urlOfferCode);
        return urlOfferCodeText;

    }

    /**
     *  Navigate to Admin URL
     * @param url
     * @return
     */
    public UserHomePage navigateToOfferUrl(String url) {
        getWebDriver().navigate().to(url);
        return PageFactory.initElements(driver, UserHomePage.class);
    }

    /**
     *  Click on Edureka Logo
     * @return
     */
    public UserHomePage clickOnLogo() {
        String logoEdureka=adminAddOffer.getLocator("ImgEdureka");
        WaitForElementPresent(logoEdureka, getTimeOut());
        clickOn(logoEdureka);
        return PageFactory.initElements(driver, UserHomePage.class);
    }


    /**
     *  Get B1S2 and Update Offer Id
     * @return
     */
    public AdminAddOfferPage getB1S2OfferId() {
        String offer_Id=adminAddOffer.getLocator("Discount.OfferId");
        WaitForElementPresent(offer_Id, getTimeOut());
        String offer_id_Text= getText(offer_Id);
        String[] offer_Id_Code= offer_id_Text.split("- ");
        propertyReader.updatePropertyTestData("B1S2OfferId", offer_Id_Code[1]);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Search Offer by ID
     * @param offerId
     * @return
     */
    public AdminAddOfferPage searchOffer(String offerId) {
        String tbOfferId=adminAddOffer.getLocator("TBOfferId");
        WaitForElementPresent(tbOfferId, getTimeOut());
        sendKeys(tbOfferId, offerId);

        String btnSearch= adminAddOffer.getLocator("BtnSearch");
        WaitForElementPresent(tbOfferId, getTimeOut());
        clickOn(btnSearch);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Edit Offer
     * @param offerId
     * @return
     */
    public AdminAddOfferPage editOffer() {
        String editOffer=adminAddOffer.getLocator("EditOffer");
        WaitForElementPresent(editOffer, getTimeOut());
        clickOn(editOffer);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Select Menu tab
     * @param tabName
     * @return
     */
    public AdminAddOfferPage selectMenuTab(String tabName) {
        String tab="//a[contains(text(),'"+tabName+"')]";
        WaitForElementPresent(tab, getTimeOut());
        mouseOver(tab);
        clickOn(tab);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     *  Select option from Admin Offer Dropdown
     * @param subMenu
     * @return
     */
    public AdminAddOfferPage selectOptionFromAdminOfferTab(String subMenu) {
        String dropdownOption="//a[contains(text(),'"+subMenu+"')]";
        WaitForElementPresent(dropdownOption, getTimeOut());
        mouseOver(dropdownOption);
        clickOn(dropdownOption);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }

    /**
     * Clear Offer cache
     * @param url
     * @return
     */
    public AdminAddOfferPage clearOfferCache(String url) {
        getWebDriver().navigate().to(url);
        return PageFactory.initElements(driver, AdminAddOfferPage.class);
    }
}