package com.edureka.referralProcess;

import org.testng.annotations.Test;

import com.edureka.pages.AllCoursesPage;
import com.edureka.pages.DashboardPage;
import com.edureka.pages.MyProfilePage;
import com.edureka.pages.OrderSummaryPage;
import com.edureka.pages.RazorPayPage;
import com.edureka.pages.SelectedCoursePage;
import com.edureka.pages.SignInModalPage;
import com.edureka.pages.UserHomePage;
import com.edureka.util.DriverTestCase;

public class ValidateRedeemNowInsideReferralTabTakesYouToAllCoursesPage extends DriverTestCase{
    private DashboardPage dashboardPage;
    private UserHomePage userHomePage;
    private SelectedCoursePage selectedCoursePage;
    private OrderSummaryPage orderSummaryPage;
    private SignInModalPage signInModalPage;
    private RazorPayPage razorPayPage;
    private MyProfilePage myProfilePage;
    private AllCoursesPage allCoursesPage;

    static String email;
    static String userName;
    static String referralEmail;
    static String referralLink;
    static String courseName;
    static String currency;
    static String bankName;
    String  referralEmail_2;
    String  referralEmail_3;
    String  referralEmail_4;
    String  referralEmail_5;

    @Test
    public void test_018VerifySourceByWhichUserAReferredToUserB() throws Exception {

        try {

            // Navigate to app url
            addLog("Navigate to the Edureka application url");
            dashboardPage = applicationSetup();

            // Verify Edureka Dashboard Page
            addLog("Verify Edureka Dashboard Page");
            dashboardPage=  dashboardPage.verifyDashboard();

            // Click on Signin Navigation Header
            addLog("Click on SignIn Navigation header");
            signInModalPage = dashboardPage.clickSignInHeader();

            // Verify LogIn Is Default
            addLog("Verify LogIn Is Default");
            signInModalPage = signInModalPage.verifyLoginIsDefault();

            // click on Sign up link
            addLog("click on Sign up link");
            signInModalPage=signInModalPage.clickSignUp();

            String edurekaDomain = propertyReader.readApplicationFile("EdurekaDomain");
            addLog("Sign up user");
            userHomePage= signInModalPage.signUp(UserHomePage.class, edurekaDomain);

            // Verify User Home Page
            addLog("Verify User Home Page");
            userHomePage=userHomePage.verifyUserPage();

            // Select Course
            courseName = propertyReader.readTestData("BigData&Hadoop");
            addLog("Select Course " + courseName);
            selectedCoursePage=userHomePage.selectCourse(courseName);

            // Verify Selected course should be open.
            addLog("Verify Selected course should be open");
            selectedCoursePage=selectedCoursePage.verifySelectedPopularCoursePage(courseName);

            // Click on Enroll Button
            addLog("Click on Enroll Button");
            orderSummaryPage=selectedCoursePage.clickOnEnrollButton(OrderSummaryPage.class);

            // Verify Order Summary Page
            addLog("Verify Order Summary Page");
            orderSummaryPage=orderSummaryPage.verifyPage();

            // Change Currency
            currency= propertyReader.readTestData("INRCurrency");
            addLog("Select currecnt" +currency +" from currnecy table");
            orderSummaryPage=orderSummaryPage.changeCurrency(currency);

            // Click on Razor pay securely button
            addLog("Click on Razor pay securely button");
            razorPayPage= orderSummaryPage.clickOnRazorPaySecurelyButton();

            // Verify Razor page
            addLog("Verify Razor page");
            razorPayPage=razorPayPage.verifyPage();

            // Click on Net Banking tab
            addLog("Click on Net Banking tab");
            razorPayPage=razorPayPage.clickOnNetBankingTab();

            // Select bank
            bankName = propertyReader.readTestData("Bank");
            addLog("Select Bank" +bankName +" from bank table ");
            razorPayPage=razorPayPage.selectBank(bankName);

            // Click on pay button
            addLog("Click on pay button");
            razorPayPage=razorPayPage.clickOnPayButton();

            // Get Parent window Id
            addLog("Get Parent Window ID");
            String parentWidnow = getParentWindowHandle();

            // Switch Child Window and Click on Succss button
            addLog("Switch Child Window and Click on Succss button");
            switchPreviewWindow();
            myProfilePage=razorPayPage.clickOnSuccessButton();

            // Switch to Parent Window and verify my Profile page
            addLog("Switch to Parent Window and verify my Profile page");
            switchParentWindow(parentWidnow);
            myProfilePage= myProfilePage.verifyPage();

            // Verify Payment success message
            addLog("Verify payment success message 'Thank you for making payment !'");
            myProfilePage= myProfilePage.verifySuccessPaymentMessage();

            // Click on Referral Tab
            addLog("Click on Referral Tab");
            myProfilePage=myProfilePage.clickOnReferralTab();

            // Click on Refer Friend button
            addLog("Click on Refer Friend button");
            myProfilePage= myProfilePage.clickOnReferButton();

            // Enter Email
            referralEmail= randomString(3)+"@tech.edureka.in";
            propertyReader.updatePropertyTestData("RefferralEmail", referralEmail);
            addLog("Enter email "+referralEmail);
            myProfilePage=myProfilePage.referFriend(referralEmail);

            // Get Referral Link
            referralLink = myProfilePage.copyReferralLink();
            addLog("Copy Referral Link "+ referralLink);

            // Verify Success Message for sent refferral mail
            addLog("Verify Success Message for sent refferral mail");
            myProfilePage=myProfilePage.VerifySuccessRefferralMailSentMsg();

            // Verify Refer Source in Ambassador Activities table
            email = propertyReader.readRunTimeData("Email_Id");
            String source = propertyReader.readTestData("Email_Refer_Source");
            addLog("Verify Refer Source in Ambassador Activities table");
            myProfilePage= myProfilePage.verifyReferSourceIn_Ambassador_activitiesTable(email, source);

        }
        catch (Error e) {
            captureScreenshot("test_018VerifySourceByWhichUserAReferredToUserB");
            throw e;
        } catch (Exception e) {
            captureScreenshot("test_018VerifySourceByWhichUserAReferredToUserB");
            throw e;
        }
    }

    @Test(dependsOnMethods={"test_018VerifySourceByWhichUserAReferredToUserB"})
    public void test_019VerifyReferredDate() throws Exception {
        try {


            // Verify Refer Date in Ambassador Activities table
            addLog("Verify Refer Date in Ambassador Activities table");
            myProfilePage= myProfilePage.verifyReferDateIn_Ambassador_activitiesTable(email);

        } catch (Error e) {
            captureScreenshot("test_019VerifyReferredDate");
            throw e;
        } catch (Exception e) {
            captureScreenshot("test_019VerifyReferredDate");
            throw e;
        }
    }

    @Test(dependsOnMethods={"test_019VerifyReferredDate"})
    public void test_011VerifyValueOfCreditAvailableInsideReferralTab() throws Exception {
        try {


            // Close Refer pop up
            addLog("Close Refer pop up");
            myProfilePage=myProfilePage.closeReferPopUp();

            // Click on Profile Dropdown
            userName = propertyReader.readRunTimeData("UserName");
            addLog("Click on Profile Dropdown");
            myProfilePage=myProfilePage.clickOnProfileDropdown(userName);  

            // Logout from the application
            addLog("Logout from the application.");
            dashboardPage = myProfilePage.logout();  

            // Verify Dashboard
            addLog("Verify Dashboard");
            dashboardPage=dashboardPage.verifyDashboard();

            // Navigate to the Referral Link
            addLog("Navigate to the "+referralLink);
            dashboardPage=dashboardPage.changeUrl(referralLink);

            // Click on Signin Navigation Header
            addLog("Click on SignIn Navigation header");
            signInModalPage = dashboardPage.clickSignInHeader();

            // Verify LogIn Is Default
            addLog("Verify LogIn Is Default");
            signInModalPage = signInModalPage.verifyLoginIsDefault();

            // click on Sign up link
            addLog("click on Sign up link");
            signInModalPage=signInModalPage.clickSignUp();

            //Sign up
            userName = propertyReader.readTestData("UserName");
            email = propertyReader.readRunTimeData("RefferralEmail");
            String phNumber = propertyReader.readTestData("PhoneNumber");
            String password = propertyReader.readTestData("Password");
            addLog("Sign up user B who is refferrad by A in TC_001");
            signInModalPage=signInModalPage.enterUserNameEmailAndPhoneNumnber(userName,email,phNumber);
            signInModalPage=signInModalPage.enterPassword(password);

            // Click on Sign create Account button
            addLog("Click on Sign create Account button");
            userHomePage=signInModalPage.clickOnCreateAccountButton();

            //Verify Edureka logo at at Home page
            addLog("Verify Edureka logo at at All Courses page");
            userHomePage=userHomePage.verifyEdurekaLogoOnHomePage();

            // Select Course
            courseName = propertyReader.readTestData("BigData&Hadoop");
            addLog("Select Course " +courseName);
            Thread.sleep(5000);
            selectedCoursePage=userHomePage.selectCourse(courseName);

            // Verify Selected course should be open.
            addLog("Verify Selected course should be open");
            selectedCoursePage=selectedCoursePage.verifySelectedPopularCoursePage(courseName);

            // Click on Enroll Button
            addLog("Click on Enroll Button");
            orderSummaryPage=selectedCoursePage.clickOnEnrollButton(OrderSummaryPage.class);

            // Verify Order Summary Page
            addLog("Verify Order Summary Page");
            orderSummaryPage=orderSummaryPage.verifyPage();

            // Change Currency
            addLog("Select currecnt" +currency +" from currnecy table");
            orderSummaryPage=orderSummaryPage.changeCurrency(currency);

            // Verify total Amount for USD is equal to Net price
            addLog("verify Total amount");
            orderSummaryPage=orderSummaryPage.verifyTotalAmount(currency);

            // Click on Razor pay securely button
            addLog("Click on Razor pay securely button");
            razorPayPage= orderSummaryPage.clickOnRazorPaySecurelyButton();

            // Verify Razor page
            addLog("Verify Razor page");
            Thread.sleep(5000);
            razorPayPage=razorPayPage.verifyRazorForReferral();

            // Click on Net Banking tab
            addLog("Click on Net Banking tab");
            razorPayPage=razorPayPage.clickOnNetBankingTab();

            // Select bank
            addLog("Select Bank" +bankName +" from bank table ");
            razorPayPage=razorPayPage.selectBank(bankName);

            // Click on pay button
            addLog("Click on pay button");
            razorPayPage=razorPayPage.clickOnPayButton();

            // Get Parent window Id
            addLog("Get Parent Window ID");
            String parentWidnow = getParentWindowHandle();

            // Switch Child Window and Click on Succss button
            addLog("Switch Child Window and Click on Succss button");
            switchPreviewWindow();
            myProfilePage=razorPayPage.clickOnSuccessButton();

            // Switch to Parent Window and verify my Profile page
            addLog("Switch to Parent Window and verify my Profile page");
            switchParentWindow(parentWidnow);
            myProfilePage= myProfilePage.verifyPage();

            // Verify Payment success message
            addLog("Verify payment success message 'Thank you for making payment !'");
            myProfilePage= myProfilePage.verifySuccessPaymentMessage();

            // Click on Referral Tab
            addLog("Click on Referral Tab");
            myProfilePage=myProfilePage.clickOnReferralTab();

            // Click on Refer Friend button
            addLog("Click on Refer Friend button");
            myProfilePage= myProfilePage.clickOnReferButton();

            // Get Referral Link
            referralLink = myProfilePage.copyReferralLink();
            addLog("Copy Referral Link "+ referralLink);

            // Close Refer pop up
            addLog("Close Refer pop up");
            myProfilePage=myProfilePage.closeReferPopUp();

            // Click on Profile Dropdown
            Thread.sleep(5000);
            addLog("Click on Profile Dropdown");
            myProfilePage=myProfilePage.clickOnProfileDropdown(userName);  

            // Logout from the application
            addLog("Logout from the application.");
            dashboardPage = myProfilePage.logout();  

            // Verify Dashboard
            addLog("Verify Dashboard");
            dashboardPage=dashboardPage.verifyDashboard();

            // Click on Signin Navigation Header
            addLog("Click on SignIn Navigation header");
            signInModalPage = dashboardPage.clickSignInHeader();

            // Verify LogIn Is Default
            addLog("Verify LogIn Is Default");
            signInModalPage = signInModalPage.verifyLoginIsDefault();

            // login user A
            addLog("Login user A");
            userHomePage= signInModalPage.loginApp();

            //Verify User Page
            addLog("Verify User Page");
            userHomePage = userHomePage.verifyUserPage();

            // Click on Profile Dropdown
            userName = propertyReader.readRunTimeData("UserName");
            addLog("Click profile dropdown");
            userHomePage= userHomePage.clickOnProfileDropdown(userName);

            // Select My Profile
            addLog("Select My Profile");
            myProfilePage=userHomePage.clickOnMyProfile();

            // Click on Referral Tab
            addLog("Click on Referral Tab");
            myProfilePage=myProfilePage.clickOnReferralTab();

            // Verify Earing Credit Points
            addLog("Verify Earing Credit Points");
            myProfilePage=myProfilePage.verifyEarningCreditPoints();

            // Get Credit Points
            addLog("Get Credit Points");
            String points = myProfilePage.getCreditPoints();

            // Verify Data for referral 
            email = propertyReader.readRunTimeData("Email_Id");
            double creditPoints = Integer.parseInt(points);
            double points_1 = creditPoints/60;
            String earning_Credit_Points= Double.toString(points_1);
            addLog("Verify Data for referral ");
            myProfilePage=myProfilePage.VerificationCreditPointsInAmbassadorsTableReferralProcess(email, earning_Credit_Points);


        }
        catch (Error e) {
            captureScreenshot("test_011VerifyValueOfCreditAvailableInsideReferralTab");
            throw e;
        } catch (Exception e) {
            captureScreenshot("test_011VerifyValueOfCreditAvailableInsideReferralTab");
            throw e;
        }
    }
    @Test(dependsOnMethods={"test_011VerifyValueOfCreditAvailableInsideReferralTab"})
    public void test_010ValidateRedeemNowInsideReferralTabTakesYouToAllCoursesPage() throws Exception {
        try {

            // Verify Redeemption 
            addLog("Verify Redeemption");
            allCoursesPage = myProfilePage.clickOnRedeemButton();

            // Verify All Course Page
            addLog("Verify All Course Page");
            allCoursesPage=allCoursesPage.verifyAllCoursesPage();

        }
        catch (Error e) {
            captureScreenshot("test_010ValidateRedeemNowInsideReferralTabTakesYouToAllCoursesPage");
            throw e;
        } catch (Exception e) {
            captureScreenshot("test_010ValidateRedeemNowInsideReferralTabTakesYouToAllCoursesPage");
            throw e;
        }
    }
    @Test(dependsOnMethods={"test_010ValidateRedeemNowInsideReferralTabTakesYouToAllCoursesPage"})
    public void test_012VerifyCreditRedeemedInsideReferralTabs() throws Exception {
        try {

            // Select Course
            String courseName = propertyReader.readTestData("ApacheSpark&Scala");
            addLog("Select Course "+courseName);
            selectedCoursePage=allCoursesPage.selectCourseFromGridView(courseName);

            // Verify Selected course should be open.
            addLog("Verify "+courseName+" course should be open");
            selectedCoursePage=selectedCoursePage.verifySelectedCoursePage(courseName);

            // Click on Enroll Button
            addLog("Click on Enroll Button");
            orderSummaryPage=selectedCoursePage.clickOnEnrollButton(OrderSummaryPage.class);

            // Verify Order Summary Page
            addLog("Verify Order Summary Page");
            orderSummaryPage=orderSummaryPage.verifyPage();

            // Change Currency
            String currency= propertyReader.readTestData("INRCurrency");
            addLog("Select currecnt" +currency +" from currnecy table");
            orderSummaryPage=orderSummaryPage.changeCurrency(currency);

            // Click on Razor pay securely button
            addLog("Click on Razor pay securely button");
            razorPayPage= orderSummaryPage.clickOnRazorPaySecurelyButton();

            // Verify Razor page
            addLog("Verify Razor page");
            razorPayPage=razorPayPage.verifyPage();

            // Click on Net Banking tab
            addLog("Click on Net Banking tab");
            razorPayPage=razorPayPage.clickOnNetBankingTab();

            // Select bank
            String bankName = propertyReader.readTestData("Bank");
            addLog("Select Bank" +bankName +" from bank table ");
            razorPayPage=razorPayPage.selectBank(bankName);

            // Click on pay button
            addLog("Click on pay button");
            razorPayPage=razorPayPage.clickOnPayButton();

            // Get Parent window Id
            addLog("Get Parent Window ID");
            String parentWidnow = getParentWindowHandle();

            // Switch Child Window and Click on Succss button
            addLog("Switch Child Window and Click on Succss button");
            switchPreviewWindow();
            myProfilePage=razorPayPage.clickOnSuccessButton();

            // Switch to Parent Window and verify my Profile page
            addLog("Switch to Parent Window and verify my Profile page");
            switchParentWindow(parentWidnow);
            myProfilePage= myProfilePage.verifyPage();

            // Verify Payment success message
            addLog("Verify payment success message 'Thank you for making payment !'");
            myProfilePage= myProfilePage.verifySuccessPaymentMessage();

            // Click on Referral Tab
            addLog("Click on Referral Tab");
            myProfilePage=myProfilePage.clickOnReferralTab();

            // Verify Redeemption Credit Points
            addLog("Verify Redeemption Credit Points");
            myProfilePage=myProfilePage.verifyRedeemptionCreditPoints();

            // Get Redeemptoion Credit Points
            String redeemptionCreditPoints=myProfilePage.getRedeemptionCreditPoints();
            addLog("Get Redeemption Credit Points "+redeemptionCreditPoints);

            email = propertyReader.readRunTimeData("Email_Id");
            int redeemptionPoints = Integer.parseInt(redeemptionCreditPoints);
            int redeemptionPoints_1 = redeemptionPoints/60;
            String redeemptionPoints_2 = Integer.toString(redeemptionPoints_1);
            myProfilePage=myProfilePage.verifyDataIn_Referral_redemptionsTable(email, redeemptionPoints_2);

        }
        catch (Error e) {
            captureScreenshot("test_012VerifyCreditRedeemedInsideReferralTabs");
            throw e;
        } catch (Exception e) {
            captureScreenshot("test_012VerifyCreditRedeemedInsideReferralTabs");
            throw e;
        }
    }

    @Test(dependsOnMethods={"test_012VerifyCreditRedeemedInsideReferralTabs"})
    public void test_015VerifyReferralDetailsTableWhichOpenClickOfViewReferralDetails() throws Exception {
        try {



            // Verify Click on View Details
            addLog("Verify Click on View Details");
            myProfilePage=myProfilePage.clickOnViewDetails();

            // Verify Records in Referral Table
            addLog("Verify Records in Referral Table");
            myProfilePage=myProfilePage.verifyRecordsInReferralTable();


        }
        catch (Error e) {
            captureScreenshot("test_015VerifyReferralDetailsTableWhichOpenClickOfViewReferralDetails");
            throw e;
        } catch (Exception e) {
            captureScreenshot("test_015VerifyReferralDetailsTableWhichOpenClickOfViewReferralDetails");
            throw e;
        }
    }
}

