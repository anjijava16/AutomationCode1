package com.edureka.util.database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import org.testng.Reporter;

import com.edureka.util.SqlUtils;
import com.sun.rowset.CachedRowSetImpl;

/**
 * This class is used to set all the database connection parameters. Any queries
 * executions, returning their results etc are performed by its objects at
 * various places of the application automation suite. This class does have all
 * static properties/methods/enumerations.
 * 
 * @since 1.0
 * @version 1.0
 */
public final class DatabaseObject {

	/**
	 * This is a connection object. This stores the database connection when the
	 * connection gets established between the Automation and Database.
	 */
	private Connection ConDb = null;

	private DatabaseConnInfoHolder dbConnectionInfo = null;
	private boolean ConnectionInformationSet = false;

	/**
	 * Default Constructor which initializes all the properties to blanks.
	 */
	public DatabaseObject(final DatabaseConnInfoHolder dbConInfo) {

		this.dbConnectionInfo = new DatabaseConnInfoHolder(dbConInfo);
		this.ConnectionInformationSet = true;
	}

	/**
	 * Resets Connection to the Database. While calling this method, make sure
	 * that at least once SetSqlConnection should have been called.
	 * 
	 * @return <b>true</b> If connection reset attempt was successful<br>
	 *         <b>false</b> If connection RESET attempt failed
	 */
	private final boolean _ResetSqlConnection() {
		if (this.ConnectionInformationSet == false) {
			return false;
		}

		boolean blnValidConnection = false;

		// Hard-coded 10 seconds for connection time out
		int connectionTimeOut = 10;

		try {
			try {
				Reporter.log("Closing current database connection.");
				this.GetConnection().close();
			} catch (Exception e) {
				// Eat exception if any happened during closure of connection
			}

			Reporter.log("Resetting database connection.");
			this.SetSqlConnection();

			// Set auto commit to true
			Reporter.log("Setting auto commit flag to true.");
			this.GetConnection().setAutoCommit(true);

			Reporter.log("Connection re-established; Checking validity");

			blnValidConnection = this.GetConnection().isValid(connectionTimeOut);

			if (blnValidConnection) {
				Reporter.log("Connection re-established is valid");
			}
		} catch (final SQLException se) {
			Reporter.log(se.getMessage());
		} catch (final Exception e) {
			Reporter.log(e.getMessage());
		}

		return blnValidConnection;
	}

	/**
	 * Validates if Connection object is alive or not
	 * 
	 * @param blnThrowExceptions
	 * @return
	 * @throws Exception
	 */
	private final boolean _ValidateConnectionState(final boolean blnThrowExceptions) throws Exception {
		boolean blnConnectionValid = false;

		if (this.ConnectionInformationSet == false) {
			if (blnThrowExceptions) {
				throw new Exception("Connection Information is not provided for creating connection object.");
			}

			return blnConnectionValid;
		}

		// Check if connection is not null and is valid connection
		blnConnectionValid = ((this.GetConnection() == null) || this.GetConnection().isValid(0));

		if (blnConnectionValid == false) {
			// Try 5 times for resetting SQL connection
			this.ResetSqlConnection(5, true, 10);

			// After retry again check for validity for connection state
			blnConnectionValid = ((this.GetConnection() == null) || this.GetConnection().isValid(0));

			if ((blnConnectionValid == false) && blnThrowExceptions) {
				throw new Exception("Connection is not established and retries limit exceeded");
			}
		}

		return blnConnectionValid;
	}

	/**
	 * Closes and nullifies specified CachedRowSet object
	 * 
	 * @param rs
	 * @returns
	 */
	public final boolean CloseCachedRowSet(CachedRowSetImpl crs) {
		boolean blnClosed = false;

		try {
			if (this._ValidateConnectionState(false) == false) {
				return blnClosed;
			}

			if (crs != null) {
				// these statement are required for clearing thin client memory
				crs.close();
				crs = null;
			}

			blnClosed = true;
		} catch (SQLException e) {
			Reporter.log(e.getMessage());
		} catch (Exception e) {
			Reporter.log(e.getMessage());
		}

		return blnClosed;
	}

	/**
	 * Closes and nullifies specified ResultSet object
	 * 
	 * @param rs
	 * @returns
	 */
	public final boolean CloseResultSet(ResultSet rs) {
		boolean blnClosed = false;

		try {
			if (this._ValidateConnectionState(false) == false) {
				return blnClosed;
			}

			if (rs != null) {
				// this statement is required for closing open cursors in
				// database
				rs.getStatement().close();
				// these statement are required for clearing thin client memory
				rs.close();
				Reporter.log("Closing ResultSet and its Statement");
				rs = null;
			}

			blnClosed = true;
		} catch (SQLException e) {
			Reporter.log(e.getMessage());
		} catch (Exception e) {
			Reporter.log(e.getMessage());
		}

		return blnClosed;
	}

	/**
	 * Closes and nullifies specified Statement object
	 * 
	 * @param stmt
	 * @returns
	 */
	public final boolean CloseStatement(Statement stmt) {
		boolean blnClosed = false;

		try {
			if (this._ValidateConnectionState(false) == false) {
				return blnClosed;
			}

			if (stmt != null) {
				stmt.close();
				stmt = null;
			}

			blnClosed = true;
		} catch (SQLException e) {
			Reporter.log(e.getMessage());
		} catch (Exception e) {
			Reporter.log(e.getMessage());
		}

		return blnClosed;
	}

	/**
	 * Executes specified query on the database. If query execution fails, it
	 * would return false. If query execution passes, it would return true.
	 * 
	 * @param Query
	 *            Specifies query to be executed on database
	 * @return <b>true :-> </b> if query executes successfully<br>
	 *         <b>False :-> </b> if query execution fails
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final boolean ExecuteDmlQuery(final String Query) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		final boolean retResult = true;
		Reporter.log("Query Executed: " + Query);

		Statement stmt = null;
		Exception e_throw = null;

		try {
			if ((Query != null) && (Query.trim().length() != 0)) {
				// Set auto commit to true
				Reporter.log("Setting auto commit flag to true.");
				this.ConDb.setAutoCommit(true);

				// Create statement object
				stmt = this.ConDb.createStatement();

				// Execute specified query using statement object
				stmt.executeUpdate(Query);
			} else {
				Reporter.log("NO Query provided to execute");
			}
		} catch (final SQLException se) {
			Reporter.log(se.getMessage());
			e_throw = se;
		} catch (final Exception e) {
			Reporter.log(e.getMessage());

			e_throw = e;
		} finally {
			this.CloseStatement(stmt);
		}

		if (e_throw != null) {
			throw e_throw;
		}

		return retResult;
	}

	/**
	 * Executes all specified queries as a batch on the database. If any query
	 * fails, it would rollback all queries before failed query. If all queries
	 * get success result, it would commit data.
	 * 
	 * @param Queries
	 *            Specifies list of queries to be executed on database
	 * 
	 * @return <b>true :-> </b> if all queries execute successfully; Also commit
	 *         data on success<br>
	 *         <b>false :-> </b> if any query execution fails; Also rolls back
	 *         data on failure
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final boolean ExecuteDmlQueryBatch(final List<String> Queries) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		final boolean retResult = true;
		Reporter.log("Query Executed: " + Queries);

		Statement stmt = null;
		Exception e_throw = null;

		try {
			if ((Queries != null) && (Queries.size() > 0)) {
				// Set auto commit to false
				Reporter.log("Setting auto commit flag to false.");
				this.ConDb.setAutoCommit(false);

				// Create statement object
				stmt = this.ConDb.createStatement();

				int count = 0;
				Reporter.log("Number of queries to be executed in batch: " + Queries.size());
				for (String Query : Queries) {
					// Execute specified query using statement object
					stmt.executeUpdate(Query);

					++count;
					if (((count % 50) == 0) || ((count % Queries.size()) == 0)) {
						Reporter.log(count + "/" + Queries.size() + " Queries executed. Data not committed yet");
					}
				}

				Reporter.log("Queries Batch execution completed");
				// Reaching here means transactions completed successfully; so
				// commit transactions
				this.ConDb.commit();
				Reporter.log("Queries Batch execution results committed");
			} else {
				Reporter.log("NO Queries provided to execute in batch");
			}
		} catch (final SQLException se) {
			Reporter.log(se.getMessage());
			e_throw = se;
		} catch (final Exception e) {
			Reporter.log(e.getMessage());

			// Rollback all queries transactions in case of exception
			this.ConDb.rollback();

			e_throw = e;
		} finally {
			this.CloseStatement(stmt);
		}

		if (e_throw != null) {
			throw e_throw;
		}

		return retResult;
	}

	/**
	 * This method executes the Select Query passed as an argument and returns
	 * all rows in a two-dimensional array.
	 * 
	 * @param SelectQuery
	 *            Specifies the query to retrieve the data from the database,
	 * @return Two dimensional array having all the records is returned, NULL is
	 *         returned in case of no records.
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final String[][] GetAllRecords(final String SelectQuery) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		ResultSet rs = this.GetResultSet(SelectQuery);

		String[][] returnArray = SqlUtils.to2dArray(rs);
		this.CloseResultSet(rs);

		return returnArray;
	}

	/**
	 * Provides all records retrieved by running provided query in CachedRowSet
	 * form.
	 * 
	 * @param SelectQuery
	 *            Specifies query to retrieve the data from the database
	 * 
	 * @return CachedRowSet having all the records is returned<br>
	 *         NULL is returned in case of no records.
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final CachedRowSetImpl GetCachedRowSet(final String SelectQuery) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		CachedRowSetImpl crs = this.GetCachedRowSet(SelectQuery, false);

		return crs;
	}

	/**
	 * Provides all records retrieved by running provided query in CachedRowSet
	 * form.
	 * 
	 * @param SelectQuery
	 *            Specifies query to retrieve the data from the database
	 * @param ZeroRecordsAsException
	 *            Specifies whether to throw exception or not incase 0 number of
	 *            records are found
	 * 
	 * @return CachedRowSet having all the records is returned<br>
	 *         NULL is returned in case of no records.
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final CachedRowSetImpl GetCachedRowSet(final String SelectQuery, final boolean ZeroRecordsAsException) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		CachedRowSetImpl crs = null;
		ResultSet rs = null;
		Exception e_throw = null;

		try {
			crs = new CachedRowSetImpl();
			rs = this.GetResultSet(SelectQuery, ZeroRecordsAsException);
			if (rs != null) {
				crs.populate(rs);
				crs.beforeFirst();
				this.CloseResultSet(rs);
			} else {
				crs = null;
			}

		} catch (final SQLException se) {
			Reporter.log(se.getMessage());
			e_throw = se;
		} catch (final Exception e) {
			Reporter.log(e.getMessage());
			e_throw = e;
		}

		if (e_throw != null) {
			this.CloseResultSet(rs);
			this.CloseCachedRowSet(crs);

			throw e_throw;
		}

		return crs;
	}

	/**
	 * This method executes the Select Query passed as an argument and returns
	 * specified column in a one-dimensional array.
	 * 
	 * @param SelectQuery
	 *            Specifies the query to retrieve the data from the database
	 * @param ColumnNum
	 *            Specifies column number to extract
	 * @return One dimensional array having first column is returned, NULL is
	 *         returned in case of no records.
	 * 
	 * @author Braj Thakur
	 * @since 1.0
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final String[] GetColumn(final String SelectQuery, final int ColumnNum) throws SQLException, Exception {
		this._ValidateConnectionState(true);

		String[] dbCol = null;

		String[][] dbRows = this.GetAllRecords(SelectQuery);
		int totalColumns = dbRows[0].length;
		int totalRows = dbRows.length;

		if ((dbRows != null) && (dbRows.length > 0)) {
			dbCol = new String[totalRows];
			if ((ColumnNum <= 0) || (ColumnNum > totalColumns)) {
				throw new Exception("Column Index specified (" + ColumnNum + ") does not lie in executed query. [Total Columns: " + totalColumns + "]");
			}

			for (int index = 0; index < totalRows; index++) {
				dbCol[index] = dbRows[index][ColumnNum - 1];
			}
		}

		return dbCol;
	}

	/**
	 * This method returns established connection object with database.
	 * 
	 * @return Connection object
	 */
	public final Connection GetConnection() {
		return this.ConDb;
	}

	/**
	 * This method executes the Select Query passed as an argument and returns
	 * only the first column in a one-dimensional array.
	 * 
	 * @param SelectQuery
	 *            Specifies the query to retrieve the data from the database
	 * @return One dimensional array having first column is returned, NULL is
	 *         returned in case of no records.
	 * 
	 * @author Braj Thakur
	 * @since 1.0
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final String[] GetFirstColumn(final String SelectQuery) throws SQLException, Exception {

		return this.GetColumn(SelectQuery, 1);
	}

	/**
	 * This method executes the Select Query passed as an argument and returns
	 * only the first row in a one-dimensional array.
	 * 
	 * @param SelectQuery
	 *            Specifies the query to retrieve the data from the database
	 * @return One dimensional array having first record is returned, NULL is
	 *         returned in case of no records.
	 * 
	 * @author Braj Thakur
	 * @since 1.0
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final String[] GetFirstRow(final String SelectQuery) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		String[] dbRow = null;
		String[][] dbRows = this.GetAllRecords(SelectQuery);
		if ((dbRows != null) && (dbRows.length > 0)) {
			dbRow = dbRows[0];
		}

		return dbRow;
	}

	/**
	 * <b>NOTE: </b><i>Recommended to create a local result-set which receives
	 * data using this method. After use of local ResultSet, close ResultSet.
	 * This is recommended else it would keep on increasing number of open
	 * cursors in database which would result in a limit reached error
	 * sometime.</i><br>
	 * <br>
	 * 
	 * Provides all records retrieved by running provided query in ResultSet
	 * form.
	 * 
	 * @param SelectQuery
	 *            Specifies query to retrieve the data from the database
	 * 
	 * @return ResultSet having all the records is returned<br>
	 *         NULL is returned in case of no records.
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final ResultSet GetResultSet(final String SelectQuery) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		ResultSet rs = this.GetResultSet(SelectQuery, false);

		return rs;
	}

	/**
	 * <b>NOTE: </b><i>Recommended to create a local result-set which receives
	 * data using this method. After use of local ResultSet, close ResultSet.
	 * This is recommended else it would keep on increasing number of open
	 * cursors in database which would result in a limit reached error
	 * sometime.</i><br>
	 * <br>
	 * 
	 * Provides all records retrieved by running provided query in ResultSet
	 * form.
	 * 
	 * @param SelectQuery
	 *            Specifies query to retrieve the data from the database
	 * @param ZeroRecordsAsException
	 *            Specifies whether to throw exception or not incase 0 number of
	 *            records are found
	 * 
	 * @return ResultSet having all the records is returned<br>
	 *         NULL is returned in case of no records.
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final ResultSet GetResultSet(final String SelectQuery, final boolean ZeroRecordsAsException) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		int noOfRows = 0;
		int noOfCols = 0;

		Reporter.log("Query Executed: " + SelectQuery);

		Statement stmt = null;
		ResultSet rs = null;
		ResultSetMetaData rsm = null;
		Exception e_throw = null;

		try {
			// Creates a Statement object for the execution of SQLs
			stmt = this.ConDb.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			if (stmt == null) {
				throw new Exception("Statement creation failed");
			}

			// Executes the specified query and returns the result as ResultSet
			rs = stmt.executeQuery(SelectQuery);
			if (rs == null) {
				throw new Exception("Resultset not built up");
			}

			// If no record is found, throws exception
			if ((this.RecordCount(rs) == 0) && ZeroRecordsAsException) {
				throw new Exception("No Data Found");
			}

			// Returns the meta data from the retrieved ResultSet
			rsm = rs.getMetaData();
			if (rsm == null) {
				throw new Exception("Resultset meta data not built up");
			}

			// moves the record pointer to the last record
			rs.last();
			// returns the row number of the record where the pointer is present
			noOfRows = rs.getRow();
			// moves the record pointer before the first record
			rs.beforeFirst();
			// returns the number of columns
			noOfCols = rsm.getColumnCount();

			Reporter.log("This query returned " + noOfRows + " Rows and " + noOfCols + " Columns.");
		} catch (final SQLException se) {
			Reporter.log(se.getMessage());
			e_throw = se;
		} catch (final Exception e) {
			Reporter.log(e.getMessage());
			e_throw = e;
		} finally {
			// CAN NOT Close statement/resultset objects finally while
			// returning ResultSet
			// IF WE CLOSE STATEMENT OBJECT, RESULTSET IS NOT RETURNED

			// Close it only if exception has occured
		}

		if (e_throw != null) {
			this.CloseResultSet(rs);
			this.CloseStatement(stmt);

			rsm = null;

			throw e_throw;
		}

		return rs;
	}

	/**
	 * This method return the value at the first row and the first column of the
	 * ResultSet.
	 * 
	 * @param SelectQuery
	 *            -> Query to retrieve the data from the database
	 * 
	 * @return Value as String
	 * 
	 * @throws SQLException
	 * @throws Exception
	 */
	public final String GetValue(final String SelectQuery) throws SQLException, Exception {

		this._ValidateConnectionState(true);

		String retValue = null;

		Reporter.log("Query Executed: " + SelectQuery);

		ResultSet rs = null;
		Exception e_throw = null;

		try {
			rs = this.GetResultSet(SelectQuery);
			// moves the record pointer to the first record
			rs.first();

			// Initialize variable
			retValue = new String();
			// returns the value as String from the first column of retrieved
			// record
			retValue = rs.getString(1);

			Reporter.log("Query returned [" + retValue + "] value.");
		} catch (final Exception e) {
			e_throw = e;
		} finally {
			this.CloseResultSet(rs);
		}

		if (e_throw != null) {
			throw e_throw;
		}

		return retValue;
	}

	/**
	 * Counts number of records retrieved in specified ResultSet
	 * 
	 * @param rs
	 * @return
	 */
	public final Integer RecordCount(final ResultSet rs) {

		Integer numRecords = 0;

		try {
			if (this._ValidateConnectionState(false) == false) {
				return -1;
			}

			if (rs != null) {
				// moves the record pointer to the last record
				rs.last();
				// returns the row number of the record where the pointer is
				// present
				numRecords = rs.getRow();
			}
		} catch (Exception e) {
			Reporter.log(e.getMessage());
		}
		Reporter.log("Number of records: " + numRecords);

		return numRecords;
	}

	/**
	 * Resets Connection to the Database. While calling this method, make sure
	 * that at least once SetSqlConnection should have been called.
	 * 
	 * @return <b>true</b> If connection reset attempt was successful<br>
	 *         <b>false</b> If connection RESET attempt failed
	 */
	public final boolean ResetSqlConnection() {
		return this.ResetSqlConnection(null, null, null);
	}

	/**
	 * Resets Connection to the Database. While calling this method, make sure
	 * that at least once SetSqlConnection should have been called.
	 * 
	 * @param numRetries
	 * @param sleepBeforeConnection
	 * @param sleepTimeInSeconds
	 * @return <b>true</b> If connection reset attempt was successful<br>
	 *         <b>false</b> If connection RESET attempt failed
	 */
	public final boolean ResetSqlConnection(Integer numRetries, Boolean sleepBeforeConnection, Integer sleepTimeInSeconds) {

		if (this.ConnectionInformationSet == false) {
			return false;
		}

		boolean blnValidConnection = false;

		if ((numRetries == null) || (numRetries <= 0)) {
			numRetries = 1;
		}

		if (sleepBeforeConnection == null) {
			sleepBeforeConnection = true;
		}

		if ((sleepTimeInSeconds == null) || (sleepTimeInSeconds <= 0)) {
			sleepTimeInSeconds = 10;
		}

		for (int retryNum = 1; retryNum <= numRetries; retryNum++) {
			try {
				Reporter.log("Attempt " + retryNum + "/" + numRetries + " failed to establish connection");
				if (sleepBeforeConnection) {
					Thread.sleep(sleepTimeInSeconds * 1000);
				}

				blnValidConnection = this._ResetSqlConnection();

				// If connection is established properly, break out of the loop
				if (blnValidConnection) {
					break;
				}
			} catch (final Exception e) {
				Reporter.log("Attempt " + retryNum + " failed to establish connection");
				Reporter.log(e.getMessage());
			}
		}

		return blnValidConnection;
	}

	/**
	 * Sets Connection to the Database.<br>
	 * Before calling this method, set below properties surely<br>
	 * <ul>
	 * <li>ConnectionDriver</li>
	 * <li>ConnectionUrl</li>
	 * <li>DbUser</li>
	 * <li>DbPassword</li>
	 * </ul>
	 * 
	 * @return <b>true</b> Connection with database is successful<br>
	 *         <b>false</b> Connection with database is NOT successful
	 */
	public final boolean SetSqlConnection() throws Exception {

		if (this.ConnectionInformationSet == false) {
			throw new Exception("Connection Information is not provided for creating connection object.");
		}

		try {
			String driver = this.dbConnectionInfo.GetConnectionDriver();
			if (driver.length() == 0) {
				this.dbConnectionInfo.SetConnectionDriver("com.mysql.jdbc.driver");
			}
			Class.forName(this.dbConnectionInfo.GetConnectionDriver());

			Reporter.log("Verification of installation of JDBC Driver done.");

			// jdbc:mysql://52.26.225.168:3306/testQA-123
			if ((this.dbConnectionInfo.GetConnectionUrl() == null) || (this.dbConnectionInfo.GetConnectionUrl().trim().length() == 0)) {
				this.dbConnectionInfo.SetConnectionUrl("jdbc:mysql://" + this.dbConnectionInfo.GetHostName() + ":" + this.dbConnectionInfo.GetDbPort() + "/" + this.dbConnectionInfo.GetDbSid());
			}

			Reporter.log("Connection URL: " + this.dbConnectionInfo.GetConnectionUrl());

			if ((this.dbConnectionInfo.GetDbUser() == null) || (this.dbConnectionInfo.GetDbUser().trim().length() == 0)) {
				this.dbConnectionInfo.SetDbUser("AMFUNC");
			}

			this.ConDb = DriverManager.getConnection(this.dbConnectionInfo.GetConnectionUrl(), this.dbConnectionInfo.GetDbUser(), this.dbConnectionInfo.GetDbPassword());

			// Set auto commit to true
			Reporter.log("Setting auto commit flag to true.");
			this.ConDb.setAutoCommit(true);

			Reporter.log("Connection established");
		} catch (final SQLException se) {
			Reporter.log(se.getMessage());

			throw se;
		} catch (final Exception e) {
			Reporter.log(e.getMessage());

			throw e;
		}

		return true;
	}

	/**
	 * Tests Connection to the Database.<br>
	 * Before calling this method, set below properties surely<br>
	 * <ul>
	 * <li>ConnectionDriver</li>
	 * <li>ConnectionUrl</li>
	 * <li>DbUser</li>
	 * <li>DbPassword</li>
	 * </ul>
	 * 
	 * @return <b>true</b> Connection with database is successful<br>
	 *         <b>false</b> Connection with database is NOT successful
	 * @throws Exception
	 * @throws SQLException
	 */
	public final boolean TestSqlConnection() throws SQLException, Exception {

		this._ValidateConnectionState(true);

		boolean blnConnectionStatus = true;

		String QueryTestConnection = "SELECT 1+1 FROM DUAL";
		String value = this.GetValue(QueryTestConnection);
		if (value.equals("2") == false) {
			throw new Exception("Connection Establishment Test FAILED");
		}

		return blnConnectionStatus;
	}
}