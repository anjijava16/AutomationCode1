package com.edureka.pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import com.edureka.util.Database;
import com.edureka.util.DriverHelper;

public class DatabaseVerifications extends DriverHelper{

    String emailId = propertyReader.readRunTimeData("Email_Id");
    String phone = propertyReader.readTestData("PhoneNumber");
    String userName = propertyReader.readRunTimeData("UserName");

    public DatabaseVerifications(WebDriver driver) {
        super(driver);
    }

    /**
     *  Verify Data in user Table
     * @param className
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUserTable(@SuppressWarnings("rawtypes") Class className) throws Exception{

        Database dbObject = new Database();

        String phoneNumber = dbObject.getRecord("users", "mobile", "email", emailId);
        Assert.assertTrue(phoneNumber.contains(phone));

        String user = dbObject.getRecord("users", "first_name", "email", emailId);
        Assert.assertTrue(user.contains(userName));

        String email = dbObject.getRecord("users", "email", "first_name", userName);
        Assert.assertTrue(email.contains(emailId));

        String status =dbObject.getRecord("users", "status", "email", emailId);
        Assert.assertEquals(status,"1");

        String password =dbObject.getRecord("users", "password", "email", emailId);
        Assert.assertTrue(!(password.equals(null)));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify Data in user leads table
     * @param className
     * @return
     * @throws Exception
     */

    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUserLeadTable(@SuppressWarnings("rawtypes") Class className, String courseId, String webSiteAction) throws Exception{

        Database dbObject = new Database();

        String zohoLead_Id= dbObject.getRecord("user_leads", "zoholead_id", "email", emailId);
        Assert.assertTrue(!(zohoLead_Id.equals(null)));

        String user_Id= dbObject.getRecord("user_leads", "user_id", "email", emailId);
        Assert.assertTrue(!(user_Id.equals(null)));
        propertyReader.updatePropertyTestData("User_ID", user_Id);

        String course_Id = dbObject.getRecord("user_leads", "course_id", "email", emailId);
        Assert.assertTrue(course_Id.contains(courseId));

        String email = dbObject.getRecord("user_leads", "email", "first_name", userName);
        Assert.assertTrue(email.contains(emailId));

        String website_action =dbObject.getRecord("user_leads", "website_action", "email", emailId);
        Assert.assertTrue(website_action.contains(webSiteAction));

        String created =dbObject.getRecord("user_leads", "created", "email", emailId);
        Assert.assertTrue(created.contains(presenttDate()));

        String modified =dbObject.getRecord("user_leads", "modified", "email", emailId);
        Assert.assertTrue(modified.contains(presenttDate()));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  verify Data in User_Course_Table
     * @param className
     * @param courseId
     * @param isPaidValue
     * @param courseGroup
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUser_Course_Table(@SuppressWarnings("rawtypes") Class className, String courseId, String isPaidValue,String courseGroup) throws Exception{

        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");

        String course_Id = dbObject.getRecord("user_courses", "course_id", "user_id", user_ID);
        Assert.assertTrue(course_Id.contains(courseId));

        String isPaid = dbObject.getRecord("user_courses", "is_paid", "user_id", user_ID);
        Assert.assertTrue(isPaid.contains(isPaid));

        String course_Group =dbObject.getRecord("user_courses", "course_group", "user_id", user_ID);
        Assert.assertTrue(course_Group.contains(courseGroup));

        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify Data in User Events table
     * @param className
     * @param courseId
     * @param event_context
     * @param utm_source
     * @param utm_campaign
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUser_Events_Table(@SuppressWarnings("rawtypes") Class className, String courseId, String event_context, String utm_campaign) throws Exception{

        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");

        String course_Id = dbObject.getRecord("user_events", "course_id", "user_id", user_ID);
        Assert.assertTrue(course_Id.contains(courseId));

        String event_Context = dbObject.getRecord("user_events", "event_context", "user_id", user_ID);
        Assert.assertTrue(event_Context.contains(event_context));

        String utm_Campaign =dbObject.getRecord("user_events", "utm_campaign", "user_id", user_ID);
        Assert.assertTrue(utm_Campaign.contains(utm_campaign));

        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify Data in Ambassadors table
     * @param className
     * @param level_id
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInAmbassadors(@SuppressWarnings("rawtypes") Class className, String level_id) throws Exception{
        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");

        String level_Id = dbObject.getRecord("ambassadors", "level_id", "user_id", user_ID);
        Assert.assertTrue(level_Id.contains(level_id));

        String email_Url = dbObject.getRecord("ambassadors", "email_url", "user_id", user_ID);
        Assert.assertTrue(!(email_Url.equals(null)));

        String facebook_Url =dbObject.getRecord("ambassadors", "facebook_url", "user_id", user_ID);
        Assert.assertTrue(!(facebook_Url.equals(null)));

        String linkdln_Url =dbObject.getRecord("ambassadors", "linkedin_url", "user_id", user_ID);
        Assert.assertTrue(!(linkdln_Url.equals(null)));

        String twitter_url =dbObject.getRecord("ambassadors", "twitter_url", "user_id", user_ID);
        Assert.assertTrue(!(twitter_url.equals(null)));

        String mobile_url =dbObject.getRecord("ambassadors", "mobile_url", "user_id", user_ID);
        Assert.assertTrue(!(mobile_url.equals(null)));

        return (T) PageFactory.initElements(driver, className);
    }
}