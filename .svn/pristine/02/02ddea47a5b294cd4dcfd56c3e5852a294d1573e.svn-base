package com.edureka.pages;

import java.util.ArrayList;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import com.edureka.util.Database;
import com.edureka.util.DriverHelper;

public class DatabaseVerifications extends DriverHelper{

    String emailId = propertyReader.readRunTimeData("Email_Id");
    String phone = propertyReader.readTestData("PhoneNumber");
    String userName = propertyReader.readRunTimeData("UserName");

    public DatabaseVerifications(WebDriver driver) {
        super(driver);
    }

    /**
     *  Verify Data in user Table
     * @param className
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUserTable(@SuppressWarnings("rawtypes") Class className) throws Exception{

        Database dbObject = new Database();

        String phoneNumber = dbObject.getRecord("users", "mobile", "email", emailId);
        Assert.assertTrue(phoneNumber.contains(phone));

        String user = dbObject.getRecord("users", "first_name", "email", emailId);
        Assert.assertTrue(user.contains(userName));

        String email = dbObject.getRecord("users", "email", "first_name", userName);
        Assert.assertTrue(email.contains(emailId));

        String status =dbObject.getRecord("users", "status", "email", emailId);
        Assert.assertEquals(status,"1");

        String password =dbObject.getRecord("users", "password", "email", emailId);
        Assert.assertTrue(!(password.equals(null)));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify Data in user leads table
     * @param className
     * @return
     * @throws Exception
     */

    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUserLeadTable(@SuppressWarnings("rawtypes") Class className, String courseId, String webSiteAction) throws Exception{

        Database dbObject = new Database();

        String zohoLead_Id= dbObject.getRecord("user_leads", "zoholead_id", "email", emailId);
        Assert.assertTrue(!(zohoLead_Id.equals(null)));

        String user_Id= dbObject.getRecord("user_leads", "user_id", "email", emailId);
        Assert.assertTrue(!(user_Id.equals(null)));
        propertyReader.updatePropertyTestData("User_ID", user_Id);

        String course_Id = dbObject.getRecord("user_leads", "course_id", "email", emailId);
        Assert.assertTrue(course_Id.contains(courseId));

        String email = dbObject.getRecord("user_leads", "email", "first_name", userName);
        Assert.assertTrue(email.contains(emailId));

        String website_action =dbObject.getRecord("user_leads", "website_action", "email", emailId);
        Assert.assertTrue(website_action.contains(webSiteAction));

        String created =dbObject.getRecord("user_leads", "created", "email", emailId);
        Assert.assertTrue(created.contains(presenttDate()));

        String modified =dbObject.getRecord("user_leads", "modified", "email", emailId);
        Assert.assertTrue(modified.contains(presenttDate()));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  verify Data in User_Course_Table
     * @param className
     * @param courseId
     * @param isPaidValue
     * @param courseGroup
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUser_Course_Table(@SuppressWarnings("rawtypes") Class className, String courseId, String isPaidValue,String courseGroup) throws Exception{

        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");

        String course_Id = dbObject.getRecord("user_courses", "course_id", "user_id", user_ID);
        Assert.assertTrue(course_Id.contains(courseId));

        String isPaid = dbObject.getRecord("user_courses", "is_paid", "user_id", user_ID);
        Assert.assertTrue(isPaid.contains(isPaid));

        String course_Group =dbObject.getRecord("user_courses", "course_group", "user_id", user_ID);
        Assert.assertTrue(course_Group.contains(courseGroup));

        String startedFrom =dbObject.getRecord("user_courses", "started_from", "user_id", user_ID);
        Assert.assertTrue(startedFrom.contains(presenttDate()));

        String endOn =dbObject.getRecord("user_courses", "ends_on", "user_id", user_ID);
        Assert.assertTrue(endOn.contains(endDate()));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify Data in User Events table
     * @param className
     * @param courseId
     * @param event_context
     * @param utm_source
     * @param utm_campaign
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInUser_Events_Table(@SuppressWarnings("rawtypes") Class className, String courseId, String event_context, String utm_campaign) throws Exception{

        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");

        String course_Id = dbObject.getRecord("user_events", "course_id", "user_id", user_ID);
        Assert.assertTrue(course_Id.contains(courseId));

        String event_Context = dbObject.getRecord("user_events", "event_context", "user_id", user_ID);
        Assert.assertTrue(event_Context.contains(event_context));

        String utm_Campaign =dbObject.getRecord("user_events", "utm_campaign", "user_id", user_ID);
        Assert.assertTrue(utm_Campaign.contains(utm_campaign));

        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify Data in Ambassadors table
     * @param className
     * @param level_id
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInAmbassadors(@SuppressWarnings("rawtypes") Class className, String level_id) throws Exception{
        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");

        String level_Id = dbObject.getRecord("ambassadors", "level_id", "user_id", user_ID);
        Assert.assertTrue(level_Id.contains(level_id));

        String email_Url = dbObject.getRecord("ambassadors", "email_url", "user_id", user_ID);
        Assert.assertTrue(!(email_Url.equals(null)));

        String facebook_Url =dbObject.getRecord("ambassadors", "facebook_url", "user_id", user_ID);
        Assert.assertTrue(!(facebook_Url.equals(null)));

        String linkdln_Url =dbObject.getRecord("ambassadors", "linkedin_url", "user_id", user_ID);
        Assert.assertTrue(!(linkdln_Url.equals(null)));

        String twitter_url =dbObject.getRecord("ambassadors", "twitter_url", "user_id", user_ID);
        Assert.assertTrue(!(twitter_url.equals(null)));

        String mobile_url =dbObject.getRecord("ambassadors", "mobile_url", "user_id", user_ID);
        Assert.assertTrue(!(mobile_url.equals(null)));

        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Data verification for Inquiry
     * @param className
     * @param courseId
     * @param webSiteAction
     * @param event_context
     * @param utm_campaign
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationFor_Inquiry(@SuppressWarnings("rawtypes") Class className, String courseId, String webSiteAction,String event_context, String utm_campaign) throws Exception{

        Database dbObject = new Database();

        String inquiry_Email = propertyReader.readRunTimeData("QueryEmail_Id");
        String user_Name = propertyReader.readRunTimeData("QueryUserName");

        String phoneNumber = dbObject.getRecord("users", "mobile", "email", inquiry_Email);
        Assert.assertTrue(phoneNumber.contains(phone));

        String email = dbObject.getRecord("users", "email", "first_name", user_Name);
        Assert.assertTrue(email.contains(inquiry_Email));

        String status =dbObject.getRecord("users", "status", "email", inquiry_Email);
        Assert.assertEquals(status,"1");

        String password =dbObject.getRecord("users", "password", "email", inquiry_Email);
        Assert.assertTrue(!(password.equals(null)));

        String zohoLead_Id= dbObject.getRecord("user_leads", "zoholead_id", "email", inquiry_Email);
        Assert.assertTrue(!(zohoLead_Id.equals(null)));

        String user_Id= dbObject.getRecord("user_leads", "user_id", "email", inquiry_Email);
        Assert.assertTrue(!(user_Id.equals(null)));

        String course_Id = dbObject.getRecord("user_leads", "course_id", "email", inquiry_Email);
        Assert.assertTrue(course_Id.contains(courseId));

        String website_action =dbObject.getRecord("user_leads", "website_action", "email", inquiry_Email);
        Assert.assertTrue(website_action.contains(webSiteAction));

        String event_Context = dbObject.getRecord("user_events", "event_context", "user_id", user_Id);
        Assert.assertTrue(event_Context.contains(event_context));

        String utm_Campaign =dbObject.getRecord("user_events", "utm_campaign", "user_id", user_Id);
        Assert.assertTrue(utm_Campaign.contains(utm_campaign));

        return (T) PageFactory.initElements(driver, className);
    }

    /**
     * Data verification in Pre_Order Table for INR currency
     * @param className
     * @param course_id
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInPreOrderTableForINR(@SuppressWarnings("rawtypes") Class className, String course_id, String batchTitle) throws Exception{
        Database dbObject = new Database();

        String user_Id= dbObject.getRecord("user_leads", "user_id", "email", emailId);
        Assert.assertTrue(!(user_Id.equals(null)));
        propertyReader.updatePropertyTestData("User_ID", user_Id);

        String course_Id = dbObject.getRecord("pre_orders", "courseid", "userid", user_Id);
        Assert.assertTrue(course_Id.contains(course_id));

        String order_Id = dbObject.getRecord("pre_orders", "orderid", "userid", user_Id);
        Assert.assertTrue(!(order_Id.equals(null)));

        String batch_Id = dbObject.getRecord("pre_orders", "batchid", "userid", user_Id);
        Assert.assertTrue(!(batch_Id.equals(null)));

        String batch_Title = dbObject.getRecord("pre_orders", "batchtitle", "userid", user_Id);
        Assert.assertTrue(batch_Title.contains(batchTitle));

        String price = propertyReader.readRunTimeData("PriceValue");
        String price_INR = dbObject.getRecord("pre_orders", "priceinr", "userid", user_Id);
        Assert.assertTrue(price.contains(price_INR));

        String serviceTax = propertyReader.readRunTimeData("ServiceTax");
        String serviceTax_INR = dbObject.getRecord("pre_orders", "servicetaxinr", "userid", user_Id);
        Assert.assertTrue(serviceTax_INR.contains(serviceTax));

        String currency_Id = dbObject.getRecord("pre_orders", "currency_id", "userid", user_Id);
        Assert.assertTrue(currency_Id.equals("1"));
        return (T) PageFactory.initElements(driver, className);
    }

    @SuppressWarnings("unchecked")
    public <T> T dataVerificationInPreOrderTableForUSD(@SuppressWarnings("rawtypes") Class className, String course_id, String batchTitle) throws Exception{
        Database dbObject = new Database();

        String user_Id= dbObject.getRecord("user_leads", "user_id", "email", emailId);
        Assert.assertTrue(!(user_Id.equals(null)));
        propertyReader.updatePropertyTestData("User_ID", user_Id);

        String course_Id = dbObject.getRecord("pre_orders", "courseid", "userid", user_Id);
        Assert.assertTrue(course_Id.contains(course_id));

        String order_Id = dbObject.getRecord("pre_orders", "orderid", "userid", user_Id);
        Assert.assertTrue(!(order_Id.equals(null)));

        String batch_Id = dbObject.getRecord("pre_orders", "batchid", "userid", user_Id);
        Assert.assertTrue(!(batch_Id.equals(null)));

        String batch_Title = dbObject.getRecord("pre_orders", "batchtitle", "userid", user_Id);
        Assert.assertTrue(batch_Title.contains(batchTitle));

        String price = propertyReader.readRunTimeData("PriceValue");
        String price_USD = dbObject.getRecord("pre_orders", "priceus", "userid", user_Id);
        Assert.assertTrue(price.contains(price_USD));

        String serviceTax_INR = dbObject.getRecord("pre_orders", "servicetaxusd", "userid", user_Id);
        Assert.assertTrue(serviceTax_INR.contains("0"));

        String currency_Id = dbObject.getRecord("pre_orders", "currency_id", "userid", user_Id);
        Assert.assertTrue(currency_Id.equals("0"));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Data Verifyfication for LMS
     * @param className
     * @param batchID
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerification_For_LMS(@SuppressWarnings("rawtypes") Class className) throws Exception{
        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");
        String batch_Id = dbObject.getRecord("user_courses", "batch_id", "user_id", user_ID);
        Assert.assertTrue(!(batch_Id.equals(null)));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify Data in 
     * @param className
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerification_For_ClassRecordingVideo(@SuppressWarnings("rawtypes") Class className, String course_Id) throws Exception{
        Database dbObject = new Database();

        String user_ID = propertyReader.readRunTimeData("User_ID");
        String last_Module_Watched = dbObject.getRecord("user_courses", "last_module_watched", "user_id", user_ID);
        Assert.assertTrue(!(last_Module_Watched.equals(null)));

        String userId = dbObject.getRecord("post_orders", "courseid", "user_id", user_ID);
        Assert.assertTrue(userId.contains(user_ID));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Database verification for offer framework in offers Tables
     * @param className
     * @param course_Id
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T dataVerification_For_OfferFramework(@SuppressWarnings("rawtypes") Class className, String discount_Description) throws Exception{
        Database dbObject = new Database();

        String offer_Id = propertyReader.readRunTimeData("Offer_Id");
        String offer_StartDate = dbObject.getRecord("offers", "start_date", "id", offer_Id);
        Assert.assertTrue(offer_StartDate.contains(presenttDate()));

        String offer_EndDate = dbObject.getRecord("offers", "end_date", "id", offer_Id);
        Assert.assertTrue(offer_EndDate.contains(nexDayDate()));

        String description = dbObject.getRecord("offers", "description", "id", offer_Id);
        Assert.assertTrue(description.contains(discount_Description));
        return (T) PageFactory.initElements(driver, className);
    }

    /**
     *  Verify
     * @param className
     * @param course_Id
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public <T> T currencyVerificationInDatabase_For_OfferFramework(@SuppressWarnings("rawtypes") Class className) throws Exception{
        Database dbObject = new Database();

        String offer_Id = propertyReader.readRunTimeData("Offer_Id");
        ArrayList<String> currency = dbObject.getRecords("offer_discounts", "currency", "offer_id", offer_Id);
        ArrayList<String> currencyList = new ArrayList <>(); 
        currencyList.add("currency=0");
        currencyList.add("currency=1");
        currencyList.add("currency=2");
        currencyList.add("currency=3");
        currencyList.add("currency=4");
        currencyList.add("currency=5");
        currencyList.add("currency=6");
        Assert.assertTrue(currency.equals(currencyList));
        return (T) PageFactory.initElements(driver, className);
    }
}