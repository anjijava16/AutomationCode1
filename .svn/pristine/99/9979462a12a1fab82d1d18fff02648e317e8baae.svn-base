package com.edureka.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import com.edureka.locators.LocatorReader;
import com.edureka.util.Database;
import com.edureka.util.DriverHelper;

public class OrderSummaryPage extends DriverHelper {


	String tableName = "users";
	String columnNameToBeFetched = "id";
	String columnNameToBeMatched = "email";
	String tableName3 = "pre_orders";
	String columnNameToBeFetched4 = "priceinr";
	String columnNameToBeFetched5 = "servicetaxinr";
	String columnNameToBeFetched6 = "discountinr";
	String columnNameToBeFetched7 = "totalinr";
	String columnNameToBeFetched8 = "servicetaxusd";

	private LocatorReader oderSummaryLocator;
	private DatabaseVerifications databaseVerification;

	public OrderSummaryPage(WebDriver driver) {
		super(driver);
		oderSummaryLocator = new LocatorReader("OrderSummary.xml");
		databaseVerification = new DatabaseVerifications(driver);
	}

	/**
	 *  Verify Order Summary page
	 * @return
	 */
	public OrderSummaryPage verifyPage(){
		String pageHeader =oderSummaryLocator.getLocator("PageHeader");
		WaitForElementPresent(pageHeader, getTimeOut());
		String pageName = getText(pageHeader);
		Assert.assertTrue(pageName.contains("Order Summary"));
		return PageFactory.initElements(driver, OrderSummaryPage.class);
	}

	/**
	 *  Verify total Amount for INR is equal to Net price + Service Tax
	 * @return
	 */
	public OrderSummaryPage verifyTotalAmount(String currency){
		String price = oderSummaryLocator.getLocator("Price");
		String totalAmount = oderSummaryLocator.getLocator("TotalAmount");
		String netPrice = oderSummaryLocator.getLocator("NetPrice");
		String discount =oderSummaryLocator.getLocator("Discount");
		String serviceTax = oderSummaryLocator.getLocator("ServiceTax");
		String discountRate = oderSummaryLocator.getLocator("Discount");

		int netPriceValue = 0;
		int totalAmountValue=0;
		int serviceTaxValue=0;
		int priceAfterDiscont=0;
		WaitForElementPresent(price, getTimeOut());
		String priceAmount= getText(price);
		String priceVal= priceAmount.replace(",","");
		String priceVal_2= priceVal.trim();
		int pirceValue = Integer.parseInt(priceVal_2);
		propertyReader.updatePropertyTestData("PriceValue", priceVal);

		if (isElementPresent(discountRate)){
			String discountAmount= getText(discount);
			String discountVal_1= discountAmount.replace(",", "");
			String discountVal_2= discountVal_1.replace("-", "");
			String discountVal_3=discountVal_2.trim();
			int discountValue = Integer.parseInt(discountVal_3);

			priceAfterDiscont= pirceValue-discountValue;

			String netPriceAmount = getText(netPrice);
			String netPriceaVal= netPriceAmount.replace(",","");
			netPriceValue = Integer.parseInt(netPriceaVal);
			Assert.assertEquals(priceAfterDiscont, netPriceValue);
		}
		if (currency.equalsIgnoreCase("INR")){
			String serviceTaxAmount= getText(serviceTax);
			String serviceTaxVal_1= serviceTaxAmount.replace(",","");
			String serviceTaxVal_2=serviceTaxVal_1.trim();
			serviceTaxValue= Integer.parseInt(serviceTaxVal_2);
			propertyReader.updatePropertyTestData("ServiceTax",serviceTaxVal_2);
			if (isElementPresent(discountRate)){
				totalAmountValue= netPriceValue+serviceTaxValue;

			}
			else{
				totalAmountValue= pirceValue+serviceTaxValue;
			}
		}
		WaitForElementPresent(totalAmount, getTimeOut());
		String amount= getText(totalAmount);
		String totalAmountVal_1= amount.replace(",","");
		String totalAmountVal_2 =totalAmountVal_1.trim();
		int totalAmountVal_3= Integer.parseInt(totalAmountVal_2);

		if (currency.equalsIgnoreCase("INR")){
			Assert.assertEquals(totalAmountValue, totalAmountVal_3);
		}
		else  {
			if (isElementPresent(discountRate)){
				Assert.assertEquals(priceAfterDiscont, totalAmountVal_3);
			}
			else{
				Assert.assertEquals(pirceValue, totalAmountVal_3);
			}
		}
		return PageFactory.initElements(driver, OrderSummaryPage.class);

	}

	/**
	 *  Verifying INR Currency has Service Tax Column
	 * @return
	 * @throws Exception
	 */

	public OrderSummaryPage verifyINRCurrency() throws Exception{
		String tBuserEmailId = propertyReader.readRunTimeData("Email_Id");
		Database dbObject = new Database();
		String userId = dbObject.getRecord(tableName, columnNameToBeFetched, columnNameToBeMatched, tBuserEmailId);
		String userTotalPrice = dbObject.getRecord(tableName3, columnNameToBeFetched4, "userid", userId);
		int totalPriceInINT = Integer.parseInt(userTotalPrice);
		String userServiceTax = dbObject.getRecord(tableName3, columnNameToBeFetched5, "userid", userId);
		int serviceTaxInINT = Integer.parseInt(userServiceTax);
		String userDiscountPrice = dbObject.getRecord(tableName3, "discountinr", "userid", userId);
		int discountPriceInINT = Integer.parseInt(userDiscountPrice);
		String userFinalPriceToPay = dbObject.getRecord(tableName3, columnNameToBeFetched7, "userid", userId);
		int finalPriceToPayInINT = ( (totalPriceInINT-discountPriceInINT) + (serviceTaxInINT) );
		String  finalPriceToPayInString = String.valueOf(finalPriceToPayInINT);
		if(finalPriceToPayInString.equals(userFinalPriceToPay)){
			System.out.println("Verified Currency From INR");
		}
		return PageFactory.initElements(driver, OrderSummaryPage.class);
	}

	/**
	 *  Verifying USD Currency without Service Tax Column
	 */
	public OrderSummaryPage verifyUSDCurrency() throws Exception{
		String tBuserEmailId = propertyReader.readRunTimeData("Email_Id");
		String tUSDCurrency = propertyReader.readRunTimeData("Total_USD");
		Database dbObject = new Database();
		String userId = dbObject.getRecord(tableName, columnNameToBeFetched, columnNameToBeMatched, tBuserEmailId);
		String userServiceTaxInUSD = dbObject.getRecord(tableName3, columnNameToBeFetched8, "userid", userId);
		if(tUSDCurrency.equals(userServiceTaxInUSD)){
			System.out.println("Verified Currency From USD");
		}
		return PageFactory.initElements(driver, OrderSummaryPage.class);
	}
	/**
	 *  Verify User name
	 * @return
	 */
	public OrderSummaryPage verifySignUpSuccessfully() {
		String pageName =oderSummaryLocator.getLocator("ProfileDropdown.UserName");
		WaitForElementPresent(pageName,20);
		WebElement userNameHeader = driver.findElement(By.xpath(pageName));
		String tBuserName = propertyReader.readRunTimeData("UserName");
		String pageheaderText = userNameHeader.getText();
		Assert.assertTrue(pageheaderText.equalsIgnoreCase(tBuserName));
		return PageFactory.initElements(driver, OrderSummaryPage.class);
	}

	/**
	 *  Verify Data in user Table
	 * @return
	 * @throws Exception
	 */
	public OrderSummaryPage dataVerificationInUserTable() throws Exception {
		OrderSummaryPage orderSummary;
		orderSummary = (OrderSummaryPage)databaseVerification.dataVerificationInUserTable(OrderSummaryPage.class);
		return orderSummary;
	}

	/**
	 *  Verify Data in User_Leads Table
	 * @param courseID
	 * @param webSiteAction
	 * @return
	 * @throws Exception
	 */
	public OrderSummaryPage dataVerificationInUser_LeadsTable(String courseId, String webSiteAction) throws Exception {
		OrderSummaryPage orderSummary;
		orderSummary = (OrderSummaryPage)databaseVerification.dataVerificationInUserLeadTable(OrderSummaryPage.class, courseId, webSiteAction);
		return orderSummary;
	}

	/**
	 *  Verify Data in User Courses Table
	 * @param courseId
	 * @param isPaidValue
	 * @param courseGroup
	 * @return
	 * @throws Exception
	 */
	public OrderSummaryPage dataVerificationInUser_CoursedTable(String courseId, String isPaidValue, String courseGroup) throws Exception {
		OrderSummaryPage orderSummary;
		orderSummary = (OrderSummaryPage)databaseVerification.dataVerificationInUser_Course_Table(OrderSummaryPage.class, courseId, isPaidValue, courseGroup);
		return orderSummary;
	}

	/**
	 *  Verify Data in user Events Table
	 * @param courseId
	 * @param event_context
	 * @param utm_source
	 * @param utm_campaign
	 * @return
	 * @throws Exception
	 */
	public OrderSummaryPage dataVerificationInUser_EventTable(String courseId, String event_context,String utm_campaign) throws Exception {
		OrderSummaryPage orderSummary;
		orderSummary = (OrderSummaryPage)databaseVerification.dataVerificationInUser_Events_Table(OrderSummaryPage.class, courseId, event_context, utm_campaign);
		return orderSummary;
	}

	/**
	 *  Verify Data in Ambassadors Table
	 * @param level_id
	 * @return
	 * @throws Exception
	 */
	public OrderSummaryPage dataVerificationInUser_AmbassadorsTable(String level_id) throws Exception {
		OrderSummaryPage orderSummary;
		orderSummary = (OrderSummaryPage)databaseVerification.dataVerificationInAmbassadors(OrderSummaryPage.class, level_id);
		return orderSummary;
	}

	/**
	 *  Database verification in Pre_Order table When currency is INR
	 * @param course_Id
	 * @param courseTitle
	 * @return
	 * @throws Exception
	 */
	public OrderSummaryPage dataVerificationInUser_PreOrderTableForINR(String course_Id, String courseTitle) throws Exception {
		OrderSummaryPage orderSummary;
		orderSummary = (OrderSummaryPage)databaseVerification.dataVerificationInPreOrderTableForINR(OrderSummaryPage.class, course_Id, courseTitle);
		return orderSummary;
	}

	/**
	 *  Database verification in Pre_Order table When currency is USD
	 * @param course_Id
	 * @param courseTitle
	 * @return
	 * @throws Exception
	 */
	public OrderSummaryPage dataVerificationInUser_PreOrderTableForUSD(String course_Id, String courseTitle) throws Exception {
		OrderSummaryPage orderSummary;
		orderSummary = (OrderSummaryPage)databaseVerification.dataVerificationInPreOrderTableForUSD(OrderSummaryPage.class, course_Id, courseTitle);
		return orderSummary;
	}

	/**
	 *  Click on Profile Dropdown
	 * @param userName
	 * @return
	 */
	public OrderSummaryPage clickOnProfileDropdown(String userName){
		String dropdown ="//span[contains(text(),'"+userName+"')]";
		WaitForElementPresent(dropdown, getTimeOut());
		clickOn(dropdown);
		return PageFactory.initElements(driver, OrderSummaryPage.class);
	}

	/**
	 *  Logout application
	 * @return
	 */
	public DashboardPage logout(){
		String logout=oderSummaryLocator.getLocator("ProfileDropdown.LTLogout");;
		WaitForElementPresent(logout, getTimeOut());
		mouseOver(logout);
		clickOn(logout);
		return PageFactory.initElements(driver, DashboardPage.class);
	}

	/**
	 *  Verify TimeZone
	 * @return
	 */
	public OrderSummaryPage veriyTimeZone(){
		String timeZone=oderSummaryLocator.getLocator("TimeZone");;
		WaitForElementPresent(timeZone, getTimeOut());
		Assert.assertTrue(isElementPresent(timeZone));
		return PageFactory.initElements(driver, OrderSummaryPage.class);
	}

	/**
	 *  Verify Payment modes
	 * @return
	 */
	public OrderSummaryPage verifyPaymentModes(){
		String debitAndCreditCard=oderSummaryLocator.getLocator("PaymentModeDebitAndCreditCard");;
		WaitForElementPresent(debitAndCreditCard, getTimeOut());
		Assert.assertTrue(isElementPresent(debitAndCreditCard));

		String paypal=oderSummaryLocator.getLocator("Paypal.PaymentModePaypal");;
		WaitForElementPresent(paypal, getTimeOut());
		Assert.assertTrue(isElementPresent(paypal));

		String netBanking =oderSummaryLocator.getLocator("PaymentModeNetBanking");;
		WaitForElementPresent(netBanking, getTimeOut());
		Assert.assertTrue(isElementPresent(netBanking));
		return PageFactory.initElements(driver, OrderSummaryPage.class);
	}

	/**
	 *  Change Country
	 * @param countryName
	 * @return
	 */
	public OrderSummaryPage changeCountry(String countryName, String currencySign) throws InterruptedException{
		String ddCountry = oderSummaryLocator.getLocator("Country.DDCountry");
		WaitForElementPresent(ddCountry, getTimeOut());
		clickOn(ddCountry);

		String tbCountry= oderSummaryLocator.getLocator("Country.TBCountry");
		WaitForElementPresent(tbCountry, getTimeOut());
		sendKeys(tbCountry, countryName);

		String country = "//div[@class='dropdown-menu open']/ul/div/div/li/a/span[contains(text(),'"+countryName+"')]";
		WaitForElementPresent(country, getTimeOut());
		clickOn(country);

		String currency ="//span[text()='"+currencySign+"']";
		WaitForElementPresent(currency, 20);
		Assert.assertTrue(isElementPresent(currency));
		return PageFactory.initElements(driver, OrderSummaryPage.class);

	}

	/**
	 *  Change Currency 
	 * @param currencyName
	 * @return
	 * @throws InterruptedException
	 */
	public OrderSummaryPage changeCurrency(String currencyName) throws InterruptedException{
		String ddCurrency = oderSummaryLocator.getLocator("Country.DDCurrency");
		WaitForElementPresent(ddCurrency, getTimeOut());
		clickOn(ddCurrency);

		String currency ="//li[@data-original-index='"+currencyName+"']";
		WaitForElementPresent(currency, 20);
		Assert.assertTrue(isElementPresent(currency));
		clickOn(currency);
		Thread.sleep(5000);
		return PageFactory.initElements(driver, OrderSummaryPage.class);

	}

	/**
	 * Click on Paypal Link
	 * @return
	 */
	public PayPalPage clickOnPaypalLink(){
		String paypal=oderSummaryLocator.getLocator("Paypal.PaymentModePaypal");;
		WaitForElementVisible(paypal, 30);
		clickOn(paypal);

		String btnPaySecurely=oderSummaryLocator.getLocator("Paypal.BTNPaypalPaymentSecurely");;
		WaitForElementPresent(btnPaySecurely, getTimeOut());
		clickOn(btnPaySecurely);

		String imgLoading = oderSummaryLocator.getLocator("ImgLoading");
		WaitForElementNotVisible(imgLoading, getTimeOut());
		return PageFactory.initElements(driver, PayPalPage.class);
	}

	/**
	 * Click on Pay Securely Link
	 * @return
	 */
	public RazorPayPage clickOnRazorPaySecurelyButton(){
		String btnPaySecurely=oderSummaryLocator.getLocator("BTNRazorPaySecurely");;
		WaitForElementPresent(btnPaySecurely, getTimeOut());
		clickOn(btnPaySecurely);
		return PageFactory.initElements(driver, RazorPayPage.class);
	}

	/**
	 *  Verify Time zone changes according to country 
	 * @param timeZone
	 * @return
	 * @throws InterruptedException
	 */
	public OrderSummaryPage verifyChangedTimeZoneWithCountry(String timeZone) {
		String countryTimeZone = oderSummaryLocator.getLocator("Country.CountryTimeZone");
		WaitForElementPresent(countryTimeZone, getTimeOut());
		String timeZoneText = getText(countryTimeZone);
		Assert.assertTrue(timeZoneText.contains(timeZone));
		return PageFactory.initElements(driver, OrderSummaryPage.class);

	}

	/**
	 *  Verify URL link Order Summary page 
	 * @return
	 */
	public OrderSummaryPage verifyUrlLink(){
		String urlLink = oderSummaryLocator.getLocator("UrlTechTeam");
		WaitForElementPresent(urlLink, getTimeOut());
		Assert.assertTrue(isElementPresent(urlLink));
		return PageFactory.initElements(driver, OrderSummaryPage.class);

	}
	
	/**
     *  Verify Edureka Logo
     * @return
     */
    public OrderSummaryPage verifyEdurekaLogoOnOrdersummaryPage(){
        String edurekaLogo = oderSummaryLocator.getLocator("EdurekaLogo");
        WaitForElementPresent(edurekaLogo, getTimeOut());
        Assert.assertTrue(isElementPresent(edurekaLogo));
        return PageFactory.initElements(driver, OrderSummaryPage.class);
    }

}

