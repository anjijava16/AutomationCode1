package com.edureka.pages;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import com.edureka.locators.LocatorReader;
import com.edureka.util.DriverHelper;


public class DashboardPage extends DriverHelper{

    private LocatorReader dashboardLocator;

    public DashboardPage(WebDriver driver) {
        super(driver);
        dashboardLocator = new LocatorReader("Dashboard.xml");
    }

    /**
     *  Click on Sign In Link
     * @return
     */
    public SignInModalPage clickSignInHeader() {
        String lTsignIn =dashboardLocator.getLocator("HomePage.LTsignIn");
        WaitForElementPresent(lTsignIn, getTimeOut());
        Assert.assertTrue(isElementPresent(lTsignIn));
        clickOn(lTsignIn);
        return PageFactory.initElements(driver, SignInModalPage.class);
    }

    /**
     *  Verify Dashboard Page
     * @return
     */
    public DashboardPage verifyDashboard() {
        String pageheader=dashboardLocator.getLocator("HomePage.PageHeader");
        WaitForElementPresent(pageheader, getTimeOut());
        Assert.assertTrue(isElementPresent(pageheader));
        return PageFactory.initElements(driver, DashboardPage.class);
    }

    /**
     * Select Course 
     * @param course
     * @return
     */
    public SelectedCoursePage selectCourse(String course) {
        List<WebElement> courses = driver.findElements(By.xpath(dashboardLocator.getLocator("HomePage.Courses")));
        int rows = courses.size();
        for (int i = 1; i < rows; i++) {
            String coursesList = "//div[@class='owl-stage-outer']/div/div["+i+"]/div/ul/a/li/h4";
            WaitForElementPresent(coursesList, getTimeOut());
            String coursesName= getText(coursesList);
            if (coursesName.contains(course)) {
            	String courseLink = "//div[@class='owl-stage-outer']/div/div["+i+"]/div/ul/a";
            	String loc = getAttribute(courseLink, "href");
            	driver.get(loc);
                break;
            }
        }
        return PageFactory.initElements(driver, SelectedCoursePage.class);
    }

    /**
     *  Verify Sign up pop has been closed 
     * @return
     */
    public DashboardPage verifySignUpNotPresent() {
        String popUpSignup=dashboardLocator.getLocator("HomePage.PopupSignup");
        WaitForElementNotVisible(popUpSignup, 20);
        Assert.assertFalse(isElementPresent(popUpSignup));
        return PageFactory.initElements(driver, DashboardPage.class);
    }
    
    /**
     *  Click on Course Tab
     * @return
     */
    public AllCoursesPage clickOnCoursesTab() {
        String tabCourses =dashboardLocator.getLocator("HomePage.TabCourses");
        WaitForElementPresent(tabCourses, getTimeOut());
        Assert.assertTrue(isElementPresent(tabCourses));
        clickOn(tabCourses);
        return PageFactory.initElements(driver, AllCoursesPage.class);
    }

    /**
     *  Click on Query box
     * @return
     * @throws InterruptedException
     */
    public DashboardPage clickOnQueryBox() throws InterruptedException{
        scrollWindow(0, 1000);
        String queryBox= dashboardLocator.getLocator("QueryBox.HeaderQueryBox");
        Thread.sleep(5000);
        mouseClickByLocator(queryBox, "Click on QuerBox");
        return PageFactory.initElements(driver, DashboardPage.class);
    }
    
    /**
     * Drop query
     * @param query
     * @param phNumber
     * @return
     */
    public DashboardPage sendQuery(){
        String userName= "User"+randomString(2);
        String email = "test" + randomString(3)+ "@tech.edureka.in";
        propertyReader.updatePropertyTestData("QueryEmail_Id", email);
        propertyReader.updatePropertyTestData("QueryUserName", userName);
        String query = propertyReader.readTestData("Query");

        String phNumber= propertyReader.readTestData("PhoneNumber");
        String tbQueryName = dashboardLocator.getLocator("QueryBox.TBQueryName");
        WaitForElementVisible(tbQueryName, getTimeOut());
        sendKeys(tbQueryName, userName);

        String tbQueryEmail= dashboardLocator.getLocator("QueryBox.TBQueryEmail");
        WaitForElementVisible(tbQueryEmail, getTimeOut());
        sendKeys(tbQueryEmail, email);


        String tbQueryPhNumberString= dashboardLocator.getLocator("QueryBox.TBQueryPhNumber");
        WaitForElementVisible(tbQueryPhNumberString, getTimeOut());
        sendKeys(tbQueryPhNumberString, phNumber);

        String tbInquiry = dashboardLocator.getLocator("QueryBox.TBInquiry");
        WaitForElementVisible(tbInquiry, getTimeOut());
        sendKeys(tbInquiry, query);

        String btnSubmit= dashboardLocator.getLocator("QueryBox.BTNSubmit");
        WaitForElementVisible(btnSubmit, getTimeOut());
        clickOn(btnSubmit);
        return PageFactory.initElements(driver, DashboardPage.class);
    }

    /**
     * Verify Submit Inquiry Message
     * @return
     */
    public DashboardPage verifySumbitInquiry(){
        String messageSubmitInquiry= dashboardLocator.getLocator("QueryBox.MsgSubmitInquiry");
        WaitForElementPresent(messageSubmitInquiry, 5);
        Assert.assertTrue(isElementPresent(messageSubmitInquiry));
        return PageFactory.initElements(driver, DashboardPage.class);
    }

}